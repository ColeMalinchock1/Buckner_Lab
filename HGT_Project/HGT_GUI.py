# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file '.\HGTui_mainScreenV2.1.ui'
#
# Created by: PyQt5 UI code generator 5.15.7
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
import sys
from PyQt5 import QtWidgets
from PyQt5.QtWidgets import *
from PyQt5.QtCore import *
from PyQt5.QtGui import *
from PyQt5.uic import loadUi
from hx711 import HX711

import time
import RPi.GPIO as GPIO
import math

class Ui_Form(object):
    def setupUi(self, Form):
        Form.setObjectName("Form")
        Form.resize(797, 460)
        Form.setStyleSheet("background-color: rgb(70, 70, 70);")
        self.timeDelayLCD = QtWidgets.QLCDNumber(Form)
        self.timeDelayLCD.setGeometry(QtCore.QRect(140, 400, 91, 31))
        self.timeDelayLCD.setStyleSheet("color: rgb(255, 255, 255);")
        self.timeDelayLCD.setObjectName("timeDelayLCD")
        self.label_3 = QtWidgets.QLabel(Form)
        self.label_3.setGeometry(QtCore.QRect(30, 400, 101, 31))
        self.label_3.setStyleSheet("color: rgb(255, 255, 255);")
        self.label_3.setObjectName("label_3")
        self.label_2 = QtWidgets.QLabel(Form)
        self.label_2.setGeometry(QtCore.QRect(30, 260, 151, 31))
        self.label_2.setStyleSheet("color: rgb(255, 255, 255);")
        self.label_2.setObjectName("label_2")
        self.setTensionLCD = QtWidgets.QLCDNumber(Form)
        self.setTensionLCD.setGeometry(QtCore.QRect(30, 300, 101, 41))
        self.setTensionLCD.setStyleSheet("color: rgb(255, 255, 255);")
        self.setTensionLCD.setObjectName("setTensionLCD")
        self.currentWeightLCD = QtWidgets.QLCDNumber(Form)
        self.currentWeightLCD.setGeometry(QtCore.QRect(30, 70, 201, 111))
        self.currentWeightLCD.setAutoFillBackground(False)
        self.currentWeightLCD.setStyleSheet("border-color: rgb(255, 255, 255);\n"
"color: rgb(255, 255, 255);")
        self.currentWeightLCD.setSmallDecimalPoint(False)
        self.currentWeightLCD.setDigitCount(3)
        self.currentWeightLCD.setSegmentStyle(QtWidgets.QLCDNumber.Filled)
        self.currentWeightLCD.setProperty("value", 0.0)
        self.currentWeightLCD.setObjectName("currentWeightLCD")
        self.label = QtWidgets.QLabel(Form)
        self.label.setGeometry(QtCore.QRect(30, 10, 251, 51))
        self.label.setStyleSheet("color: rgb(255, 255, 255);")
        self.label.setObjectName("label")
        self.verticalLayoutWidget_2 = QtWidgets.QWidget(Form)
        self.verticalLayoutWidget_2.setGeometry(QtCore.QRect(180, 280, 95, 81))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.MinimumExpanding, QtWidgets.QSizePolicy.MinimumExpanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.verticalLayoutWidget_2.sizePolicy().hasHeightForWidth())
        self.verticalLayoutWidget_2.setSizePolicy(sizePolicy)
        self.verticalLayoutWidget_2.setObjectName("verticalLayoutWidget_2")
        self.verticalLayout_3 = QtWidgets.QVBoxLayout(self.verticalLayoutWidget_2)
        self.verticalLayout_3.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_3.setObjectName("verticalLayout_3")
        self.tensionUp = QtWidgets.QPushButton(self.verticalLayoutWidget_2)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.MinimumExpanding, QtWidgets.QSizePolicy.MinimumExpanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.tensionUp.sizePolicy().hasHeightForWidth())
        self.tensionUp.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(10)
        self.tensionUp.setFont(font)
        self.tensionUp.setStyleSheet("color: rgb(255, 255, 255);")
        self.tensionUp.setObjectName("tensionUp")
        self.verticalLayout_3.addWidget(self.tensionUp)
        self.tensionDown = QtWidgets.QPushButton(self.verticalLayoutWidget_2)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.MinimumExpanding, QtWidgets.QSizePolicy.MinimumExpanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.tensionDown.sizePolicy().hasHeightForWidth())
        self.tensionDown.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(10)
        self.tensionDown.setFont(font)
        self.tensionDown.setStyleSheet("color: rgb(255, 255, 255);")
        self.tensionDown.setObjectName("tensionDown")
        self.verticalLayout_3.addWidget(self.tensionDown)
        self.line = QtWidgets.QFrame(Form)
        self.line.setGeometry(QtCore.QRect(280, 10, 20, 441))
        font = QtGui.QFont()
        font.setPointSize(8)
        font.setBold(False)
        self.line.setFont(font)
        self.line.setStyleSheet("color: rgb(255, 255, 255);")
        self.line.setFrameShadow(QtWidgets.QFrame.Plain)
        self.line.setLineWidth(3)
        self.line.setFrameShape(QtWidgets.QFrame.VLine)
        self.line.setObjectName("line")
        self.line_2 = QtWidgets.QFrame(Form)
        self.line_2.setGeometry(QtCore.QRect(30, 200, 221, 20))
        self.line_2.setFrameShape(QtWidgets.QFrame.HLine)
        self.line_2.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_2.setObjectName("line_2")
        self.line_3 = QtWidgets.QFrame(Form)
        self.line_3.setGeometry(QtCore.QRect(30, 370, 221, 20))
        self.line_3.setFrameShape(QtWidgets.QFrame.HLine)
        self.line_3.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_3.setObjectName("line_3")
        self.stackedWidget = QtWidgets.QStackedWidget(Form)
        self.stackedWidget.setGeometry(QtCore.QRect(420, 20, 351, 421))
        self.stackedWidget.setObjectName("stackedWidget")
        self.setTension = QtWidgets.QWidget()
        self.setTension.setObjectName("setTension")
        self.gridLayoutWidget = QtWidgets.QWidget(self.setTension)
        self.gridLayoutWidget.setGeometry(QtCore.QRect(10, 150, 331, 261))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.MinimumExpanding, QtWidgets.QSizePolicy.MinimumExpanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.gridLayoutWidget.sizePolicy().hasHeightForWidth())
        self.gridLayoutWidget.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(14)
        self.gridLayoutWidget.setFont(font)
        self.gridLayoutWidget.setObjectName("gridLayoutWidget")
        self.gridLayout = QtWidgets.QGridLayout(self.gridLayoutWidget)
        self.gridLayout.setContentsMargins(0, 0, 0, 0)
        self.gridLayout.setObjectName("gridLayout")
        self.keypad4 = QtWidgets.QPushButton(self.gridLayoutWidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.MinimumExpanding, QtWidgets.QSizePolicy.MinimumExpanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.keypad4.sizePolicy().hasHeightForWidth())
        self.keypad4.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(14)
        self.keypad4.setFont(font)
        self.keypad4.setStyleSheet("color: rgb(255, 255, 255);")
        self.keypad4.setObjectName("keypad4")
        self.gridLayout.addWidget(self.keypad4, 1, 0, 1, 1)
        self.keypad8 = QtWidgets.QPushButton(self.gridLayoutWidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.MinimumExpanding, QtWidgets.QSizePolicy.MinimumExpanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.keypad8.sizePolicy().hasHeightForWidth())
        self.keypad8.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(14)
        self.keypad8.setFont(font)
        self.keypad8.setStyleSheet("color: rgb(255, 255, 255);")
        self.keypad8.setObjectName("keypad8")
        self.gridLayout.addWidget(self.keypad8, 2, 1, 1, 1)
        self.keypad2 = QtWidgets.QPushButton(self.gridLayoutWidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.MinimumExpanding, QtWidgets.QSizePolicy.MinimumExpanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.keypad2.sizePolicy().hasHeightForWidth())
        self.keypad2.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(14)
        self.keypad2.setFont(font)
        self.keypad2.setStyleSheet("color: rgb(255, 255, 255);")
        self.keypad2.setObjectName("keypad2")
        self.gridLayout.addWidget(self.keypad2, 0, 1, 1, 1)
        self.keypad9 = QtWidgets.QPushButton(self.gridLayoutWidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.MinimumExpanding, QtWidgets.QSizePolicy.MinimumExpanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.keypad9.sizePolicy().hasHeightForWidth())
        self.keypad9.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(14)
        self.keypad9.setFont(font)
        self.keypad9.setStyleSheet("color: rgb(255, 255, 255);")
        self.keypad9.setObjectName("keypad9")
        self.gridLayout.addWidget(self.keypad9, 2, 2, 1, 1)
        self.keypad0 = QtWidgets.QPushButton(self.gridLayoutWidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.MinimumExpanding, QtWidgets.QSizePolicy.MinimumExpanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.keypad0.sizePolicy().hasHeightForWidth())
        self.keypad0.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(14)
        self.keypad0.setFont(font)
        self.keypad0.setStyleSheet("color: rgb(255, 255, 255);")
        self.keypad0.setObjectName("keypad0")
        self.gridLayout.addWidget(self.keypad0, 3, 1, 1, 1)
        self.keypad7 = QtWidgets.QPushButton(self.gridLayoutWidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.MinimumExpanding, QtWidgets.QSizePolicy.MinimumExpanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.keypad7.sizePolicy().hasHeightForWidth())
        self.keypad7.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(14)
        self.keypad7.setFont(font)
        self.keypad7.setStyleSheet("color: rgb(255, 255, 255);")
        self.keypad7.setObjectName("keypad7")
        self.gridLayout.addWidget(self.keypad7, 2, 0, 1, 1)
        self.keypadDecimal = QtWidgets.QPushButton(self.gridLayoutWidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.MinimumExpanding, QtWidgets.QSizePolicy.MinimumExpanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.keypadDecimal.sizePolicy().hasHeightForWidth())
        self.keypadDecimal.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(11)
        self.keypadDecimal.setFont(font)
        self.keypadDecimal.setStyleSheet("color: rgb(255, 255, 255);")
        self.keypadDecimal.setObjectName("keypadDecimal")
        self.gridLayout.addWidget(self.keypadDecimal, 3, 0, 1, 1)
        self.keypadEnter = QtWidgets.QPushButton(self.gridLayoutWidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.MinimumExpanding, QtWidgets.QSizePolicy.MinimumExpanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.keypadEnter.sizePolicy().hasHeightForWidth())
        self.keypadEnter.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(11)
        self.keypadEnter.setFont(font)
        self.keypadEnter.setStyleSheet("color: rgb(255, 255, 255);")
        self.keypadEnter.setObjectName("keypadEnter")
        self.gridLayout.addWidget(self.keypadEnter, 3, 2, 1, 1)
        self.keypad1 = QtWidgets.QPushButton(self.gridLayoutWidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.MinimumExpanding, QtWidgets.QSizePolicy.MinimumExpanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.keypad1.sizePolicy().hasHeightForWidth())
        self.keypad1.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(14)
        self.keypad1.setFont(font)
        self.keypad1.setContextMenuPolicy(QtCore.Qt.NoContextMenu)
        self.keypad1.setStyleSheet("color: rgb(255, 255, 255);")
        self.keypad1.setIconSize(QtCore.QSize(20, 20))
        self.keypad1.setAutoRepeatDelay(293)
        self.keypad1.setObjectName("keypad1")
        self.gridLayout.addWidget(self.keypad1, 0, 0, 1, 1)
        self.keypad3 = QtWidgets.QPushButton(self.gridLayoutWidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.MinimumExpanding, QtWidgets.QSizePolicy.MinimumExpanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.keypad3.sizePolicy().hasHeightForWidth())
        self.keypad3.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(14)
        self.keypad3.setFont(font)
        self.keypad3.setStyleSheet("color: rgb(255, 255, 255);")
        self.keypad3.setObjectName("keypad3")
        self.gridLayout.addWidget(self.keypad3, 0, 2, 1, 1)
        self.keypad6 = QtWidgets.QPushButton(self.gridLayoutWidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.MinimumExpanding, QtWidgets.QSizePolicy.MinimumExpanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.keypad6.sizePolicy().hasHeightForWidth())
        self.keypad6.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(14)
        self.keypad6.setFont(font)
        self.keypad6.setStyleSheet("color: rgb(255, 255, 255);")
        self.keypad6.setObjectName("keypad6")
        self.gridLayout.addWidget(self.keypad6, 1, 2, 1, 1)
        self.keypad5 = QtWidgets.QPushButton(self.gridLayoutWidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.MinimumExpanding, QtWidgets.QSizePolicy.MinimumExpanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.keypad5.sizePolicy().hasHeightForWidth())
        self.keypad5.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(14)
        self.keypad5.setFont(font)
        self.keypad5.setStyleSheet("color: rgb(255, 255, 255);")
        self.keypad5.setObjectName("keypad5")
        self.gridLayout.addWidget(self.keypad5, 1, 1, 1, 1)
        self.label_16 = QtWidgets.QLabel(self.setTension)
        self.label_16.setGeometry(QtCore.QRect(0, 0, 341, 41))
        self.label_16.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.label_16.setStyleSheet("color: rgb(255, 255, 255);")
        self.label_16.setFrameShape(QtWidgets.QFrame.Panel)
        self.label_16.setAlignment(QtCore.Qt.AlignCenter)
        self.label_16.setObjectName("label_16")
        self.keypadClear_5 = QtWidgets.QPushButton(self.setTension)
        self.keypadClear_5.setGeometry(QtCore.QRect(270, 100, 71, 41))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.MinimumExpanding, QtWidgets.QSizePolicy.MinimumExpanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.keypadClear_5.sizePolicy().hasHeightForWidth())
        self.keypadClear_5.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(14)
        font.setBold(True)
        self.keypadClear_5.setFont(font)
        self.keypadClear_5.setStyleSheet("color: rgb(255, 255, 255);")
        self.keypadClear_5.setObjectName("keypadClear_5")
        self.line_9 = QtWidgets.QFrame(self.setTension)
        self.line_9.setGeometry(QtCore.QRect(0, 40, 341, 20))
        self.line_9.setStyleSheet("color: rgb(255, 255, 255);")
        self.line_9.setFrameShadow(QtWidgets.QFrame.Plain)
        self.line_9.setLineWidth(3)
        self.line_9.setFrameShape(QtWidgets.QFrame.HLine)
        self.line_9.setObjectName("line_9")
        self.setMarkTension = QtWidgets.QLabel(self.setTension)
        self.setMarkTension.setEnabled(True)
        self.setMarkTension.setGeometry(QtCore.QRect(30, 70, 161, 61))
        font = QtGui.QFont()
        font.setFamily("Sitka Subheading")
        font.setPointSize(14)
        font.setBold(False)
        self.setMarkTension.setFont(font)
        self.setMarkTension.setObjectName("setMarkTension")
        self.tooLargeLabelTension = QtWidgets.QLabel(self.setTension)
        self.tooLargeLabelTension.setEnabled(True)
        self.tooLargeLabelTension.setGeometry(QtCore.QRect(10, 60, 101, 71))
        font = QtGui.QFont()
        font.setFamily("Sitka Subheading")
        font.setPointSize(14)
        font.setBold(False)
        self.tooLargeLabelTension.setFont(font)
        self.tooLargeLabelTension.setTextFormat(QtCore.Qt.AutoText)
        self.tooLargeLabelTension.setScaledContents(False)
        self.tooLargeLabelTension.setWordWrap(True)
        self.tooLargeLabelTension.setObjectName("tooLargeLabelTension")
        self.manualSetTensionLCD = QtWidgets.QLCDNumber(self.setTension)
        self.manualSetTensionLCD.setGeometry(QtCore.QRect(100, 70, 161, 61))
        self.manualSetTensionLCD.setStyleSheet("color: rgb(255, 255, 255);")
        self.manualSetTensionLCD.setObjectName("manualSetTensionLCD")
        self.label_17 = QtWidgets.QLabel(self.setTension)
        self.label_17.setEnabled(True)
        self.label_17.setGeometry(QtCore.QRect(270, 60, 71, 31))
        font = QtGui.QFont()
        font.setFamily("Sitka Subheading")
        font.setPointSize(14)
        font.setBold(False)
        self.label_17.setFont(font)
        self.label_17.setStyleSheet("color: rgb(255, 255, 255);")
        self.label_17.setObjectName("label_17")
        self.gridLayoutWidget.raise_()
        self.keypadClear_5.raise_()
        self.line_9.raise_()
        self.setMarkTension.raise_()
        self.tooLargeLabelTension.raise_()
        self.manualSetTensionLCD.raise_()
        self.label_17.raise_()
        self.label_16.raise_()
        self.stackedWidget.addWidget(self.setTension)
        self.setTimeDelay = QtWidgets.QWidget()
        self.setTimeDelay.setObjectName("setTimeDelay")
        self.gridLayoutWidget_2 = QtWidgets.QWidget(self.setTimeDelay)
        self.gridLayoutWidget_2.setGeometry(QtCore.QRect(10, 150, 331, 261))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.MinimumExpanding, QtWidgets.QSizePolicy.MinimumExpanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.gridLayoutWidget_2.sizePolicy().hasHeightForWidth())
        self.gridLayoutWidget_2.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(14)
        self.gridLayoutWidget_2.setFont(font)
        self.gridLayoutWidget_2.setObjectName("gridLayoutWidget_2")
        self.gridLayout_2 = QtWidgets.QGridLayout(self.gridLayoutWidget_2)
        self.gridLayout_2.setContentsMargins(0, 0, 0, 0)
        self.gridLayout_2.setObjectName("gridLayout_2")
        self.keypad0_2 = QtWidgets.QPushButton(self.gridLayoutWidget_2)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.MinimumExpanding, QtWidgets.QSizePolicy.MinimumExpanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.keypad0_2.sizePolicy().hasHeightForWidth())
        self.keypad0_2.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(14)
        self.keypad0_2.setFont(font)
        self.keypad0_2.setStyleSheet("color: rgb(255, 255, 255);")
        self.keypad0_2.setObjectName("keypad0_2")
        self.gridLayout_2.addWidget(self.keypad0_2, 3, 1, 1, 1)
        self.keypad2_2 = QtWidgets.QPushButton(self.gridLayoutWidget_2)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.MinimumExpanding, QtWidgets.QSizePolicy.MinimumExpanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.keypad2_2.sizePolicy().hasHeightForWidth())
        self.keypad2_2.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(14)
        self.keypad2_2.setFont(font)
        self.keypad2_2.setStyleSheet("color: rgb(255, 255, 255);")
        self.keypad2_2.setObjectName("keypad2_2")
        self.gridLayout_2.addWidget(self.keypad2_2, 0, 1, 1, 1)
        self.keypad9_2 = QtWidgets.QPushButton(self.gridLayoutWidget_2)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.MinimumExpanding, QtWidgets.QSizePolicy.MinimumExpanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.keypad9_2.sizePolicy().hasHeightForWidth())
        self.keypad9_2.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(14)
        self.keypad9_2.setFont(font)
        self.keypad9_2.setStyleSheet("color: rgb(255, 255, 255);")
        self.keypad9_2.setObjectName("keypad9_2")
        self.gridLayout_2.addWidget(self.keypad9_2, 2, 2, 1, 1)
        self.keypad1_2 = QtWidgets.QPushButton(self.gridLayoutWidget_2)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.MinimumExpanding, QtWidgets.QSizePolicy.MinimumExpanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.keypad1_2.sizePolicy().hasHeightForWidth())
        self.keypad1_2.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(14)
        self.keypad1_2.setFont(font)
        self.keypad1_2.setContextMenuPolicy(QtCore.Qt.NoContextMenu)
        self.keypad1_2.setStyleSheet("color: rgb(255, 255, 255);")
        self.keypad1_2.setIconSize(QtCore.QSize(20, 20))
        self.keypad1_2.setAutoRepeatDelay(293)
        self.keypad1_2.setObjectName("keypad1_2")
        self.gridLayout_2.addWidget(self.keypad1_2, 0, 0, 1, 1)
        self.keypad4_2 = QtWidgets.QPushButton(self.gridLayoutWidget_2)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.MinimumExpanding, QtWidgets.QSizePolicy.MinimumExpanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.keypad4_2.sizePolicy().hasHeightForWidth())
        self.keypad4_2.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(14)
        self.keypad4_2.setFont(font)
        self.keypad4_2.setStyleSheet("color: rgb(255, 255, 255);")
        self.keypad4_2.setObjectName("keypad4_2")
        self.gridLayout_2.addWidget(self.keypad4_2, 1, 0, 1, 1)
        self.keypadEnter_2 = QtWidgets.QPushButton(self.gridLayoutWidget_2)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.MinimumExpanding, QtWidgets.QSizePolicy.MinimumExpanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.keypadEnter_2.sizePolicy().hasHeightForWidth())
        self.keypadEnter_2.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(11)
        self.keypadEnter_2.setFont(font)
        self.keypadEnter_2.setStyleSheet("color: rgb(255, 255, 255);")
        self.keypadEnter_2.setObjectName("keypadEnter_2")
        self.gridLayout_2.addWidget(self.keypadEnter_2, 3, 2, 1, 1)
        self.keypad8_2 = QtWidgets.QPushButton(self.gridLayoutWidget_2)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.MinimumExpanding, QtWidgets.QSizePolicy.MinimumExpanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.keypad8_2.sizePolicy().hasHeightForWidth())
        self.keypad8_2.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(14)
        self.keypad8_2.setFont(font)
        self.keypad8_2.setStyleSheet("color: rgb(255, 255, 255);")
        self.keypad8_2.setObjectName("keypad8_2")
        self.gridLayout_2.addWidget(self.keypad8_2, 2, 1, 1, 1)
        self.keypad6_2 = QtWidgets.QPushButton(self.gridLayoutWidget_2)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.MinimumExpanding, QtWidgets.QSizePolicy.MinimumExpanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.keypad6_2.sizePolicy().hasHeightForWidth())
        self.keypad6_2.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(14)
        self.keypad6_2.setFont(font)
        self.keypad6_2.setStyleSheet("color: rgb(255, 255, 255);")
        self.keypad6_2.setObjectName("keypad6_2")
        self.gridLayout_2.addWidget(self.keypad6_2, 1, 2, 1, 1)
        self.keypad3_2 = QtWidgets.QPushButton(self.gridLayoutWidget_2)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.MinimumExpanding, QtWidgets.QSizePolicy.MinimumExpanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.keypad3_2.sizePolicy().hasHeightForWidth())
        self.keypad3_2.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(14)
        self.keypad3_2.setFont(font)
        self.keypad3_2.setStyleSheet("color: rgb(255, 255, 255);")
        self.keypad3_2.setObjectName("keypad3_2")
        self.gridLayout_2.addWidget(self.keypad3_2, 0, 2, 1, 1)
        self.keypadDecimal_2 = QtWidgets.QPushButton(self.gridLayoutWidget_2)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.MinimumExpanding, QtWidgets.QSizePolicy.MinimumExpanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.keypadDecimal_2.sizePolicy().hasHeightForWidth())
        self.keypadDecimal_2.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(11)
        self.keypadDecimal_2.setFont(font)
        self.keypadDecimal_2.setStyleSheet("color: rgb(255, 255, 255);")
        self.keypadDecimal_2.setObjectName("keypadDecimal_2")
        self.gridLayout_2.addWidget(self.keypadDecimal_2, 3, 0, 1, 1)
        self.keypad5_2 = QtWidgets.QPushButton(self.gridLayoutWidget_2)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.MinimumExpanding, QtWidgets.QSizePolicy.MinimumExpanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.keypad5_2.sizePolicy().hasHeightForWidth())
        self.keypad5_2.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(14)
        self.keypad5_2.setFont(font)
        self.keypad5_2.setStyleSheet("color: rgb(255, 255, 255);")
        self.keypad5_2.setObjectName("keypad5_2")
        self.gridLayout_2.addWidget(self.keypad5_2, 1, 1, 1, 1)
        self.keypad7_2 = QtWidgets.QPushButton(self.gridLayoutWidget_2)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.MinimumExpanding, QtWidgets.QSizePolicy.MinimumExpanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.keypad7_2.sizePolicy().hasHeightForWidth())
        self.keypad7_2.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(14)
        self.keypad7_2.setFont(font)
        self.keypad7_2.setStyleSheet("color: rgb(255, 255, 255);")
        self.keypad7_2.setObjectName("keypad7_2")
        self.gridLayout_2.addWidget(self.keypad7_2, 2, 0, 1, 1)
        self.label_18 = QtWidgets.QLabel(self.setTimeDelay)
        self.label_18.setGeometry(QtCore.QRect(0, 0, 341, 41))
        self.label_18.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.label_18.setStyleSheet("color: rgb(255, 255, 255);")
        self.label_18.setFrameShape(QtWidgets.QFrame.Panel)
        self.label_18.setAlignment(QtCore.Qt.AlignCenter)
        self.label_18.setObjectName("label_18")
        self.keypadClear_6 = QtWidgets.QPushButton(self.setTimeDelay)
        self.keypadClear_6.setGeometry(QtCore.QRect(270, 100, 71, 41))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.MinimumExpanding, QtWidgets.QSizePolicy.MinimumExpanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.keypadClear_6.sizePolicy().hasHeightForWidth())
        self.keypadClear_6.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(14)
        font.setBold(True)
        self.keypadClear_6.setFont(font)
        self.keypadClear_6.setStyleSheet("color: rgb(255, 255, 255);")
        self.keypadClear_6.setObjectName("keypadClear_6")
        self.line_10 = QtWidgets.QFrame(self.setTimeDelay)
        self.line_10.setGeometry(QtCore.QRect(0, 40, 341, 20))
        self.line_10.setStyleSheet("color: rgb(255, 255, 255);")
        self.line_10.setFrameShadow(QtWidgets.QFrame.Plain)
        self.line_10.setLineWidth(3)
        self.line_10.setFrameShape(QtWidgets.QFrame.HLine)
        self.line_10.setObjectName("line_10")
        self.setMarkDelay = QtWidgets.QLabel(self.setTimeDelay)
        self.setMarkDelay.setEnabled(True)
        self.setMarkDelay.setGeometry(QtCore.QRect(30, 70, 161, 61))
        font = QtGui.QFont()
        font.setFamily("Sitka Subheading")
        font.setPointSize(14)
        font.setBold(False)
        self.setMarkDelay.setFont(font)
        self.setMarkDelay.setObjectName("setMarkDelay")
        self.tooLargeLabelDelay = QtWidgets.QLabel(self.setTimeDelay)
        self.tooLargeLabelDelay.setEnabled(True)
        self.tooLargeLabelDelay.setGeometry(QtCore.QRect(10, 60, 101, 71))
        font = QtGui.QFont()
        font.setFamily("Sitka Subheading")
        font.setPointSize(14)
        font.setBold(False)
        self.tooLargeLabelDelay.setFont(font)
        self.tooLargeLabelDelay.setTextFormat(QtCore.Qt.AutoText)
        self.tooLargeLabelDelay.setScaledContents(False)
        self.tooLargeLabelDelay.setWordWrap(True)
        self.tooLargeLabelDelay.setObjectName("tooLargeLabelDelay")
        self.manualSetDelayLCD = QtWidgets.QLCDNumber(self.setTimeDelay)
        self.manualSetDelayLCD.setGeometry(QtCore.QRect(100, 70, 161, 61))
        self.manualSetDelayLCD.setStyleSheet("color: rgb(255, 255, 255);")
        self.manualSetDelayLCD.setObjectName("manualSetDelayLCD")
        self.label_19 = QtWidgets.QLabel(self.setTimeDelay)
        self.label_19.setEnabled(True)
        self.label_19.setGeometry(QtCore.QRect(270, 60, 71, 31))
        font = QtGui.QFont()
        font.setFamily("Sitka Subheading")
        font.setPointSize(14)
        font.setBold(False)
        self.label_19.setFont(font)
        self.label_19.setStyleSheet("color: rgb(255, 255, 255);")
        self.label_19.setObjectName("label_19")
        self.gridLayoutWidget_2.raise_()
        self.keypadClear_6.raise_()
        self.line_10.raise_()
        self.setMarkDelay.raise_()
        self.tooLargeLabelDelay.raise_()
        self.manualSetDelayLCD.raise_()
        self.label_19.raise_()
        self.label_18.raise_()
        self.stackedWidget.addWidget(self.setTimeDelay)
        self.setSchedule1 = QtWidgets.QWidget()
        self.setSchedule1.setObjectName("setSchedule1")
        self.gridLayoutWidget_3 = QtWidgets.QWidget(self.setSchedule1)
        self.gridLayoutWidget_3.setGeometry(QtCore.QRect(10, 150, 331, 261))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.MinimumExpanding, QtWidgets.QSizePolicy.MinimumExpanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.gridLayoutWidget_3.sizePolicy().hasHeightForWidth())
        self.gridLayoutWidget_3.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(14)
        self.gridLayoutWidget_3.setFont(font)
        self.gridLayoutWidget_3.setObjectName("gridLayoutWidget_3")
        self.gridLayout_3 = QtWidgets.QGridLayout(self.gridLayoutWidget_3)
        self.gridLayout_3.setContentsMargins(0, 0, 0, 0)
        self.gridLayout_3.setObjectName("gridLayout_3")
        self.keypad4_3 = QtWidgets.QPushButton(self.gridLayoutWidget_3)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.MinimumExpanding, QtWidgets.QSizePolicy.MinimumExpanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.keypad4_3.sizePolicy().hasHeightForWidth())
        self.keypad4_3.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(14)
        self.keypad4_3.setFont(font)
        self.keypad4_3.setStyleSheet("color: rgb(255, 255, 255);")
        self.keypad4_3.setObjectName("keypad4_3")
        self.gridLayout_3.addWidget(self.keypad4_3, 1, 0, 1, 1)
        self.keypad8_3 = QtWidgets.QPushButton(self.gridLayoutWidget_3)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.MinimumExpanding, QtWidgets.QSizePolicy.MinimumExpanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.keypad8_3.sizePolicy().hasHeightForWidth())
        self.keypad8_3.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(14)
        self.keypad8_3.setFont(font)
        self.keypad8_3.setStyleSheet("color: rgb(255, 255, 255);")
        self.keypad8_3.setObjectName("keypad8_3")
        self.gridLayout_3.addWidget(self.keypad8_3, 2, 1, 1, 1)
        self.keypad2_3 = QtWidgets.QPushButton(self.gridLayoutWidget_3)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.MinimumExpanding, QtWidgets.QSizePolicy.MinimumExpanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.keypad2_3.sizePolicy().hasHeightForWidth())
        self.keypad2_3.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(14)
        self.keypad2_3.setFont(font)
        self.keypad2_3.setStyleSheet("color: rgb(255, 255, 255);")
        self.keypad2_3.setObjectName("keypad2_3")
        self.gridLayout_3.addWidget(self.keypad2_3, 0, 1, 1, 1)
        self.keypad9_3 = QtWidgets.QPushButton(self.gridLayoutWidget_3)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.MinimumExpanding, QtWidgets.QSizePolicy.MinimumExpanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.keypad9_3.sizePolicy().hasHeightForWidth())
        self.keypad9_3.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(14)
        self.keypad9_3.setFont(font)
        self.keypad9_3.setStyleSheet("color: rgb(255, 255, 255);")
        self.keypad9_3.setObjectName("keypad9_3")
        self.gridLayout_3.addWidget(self.keypad9_3, 2, 2, 1, 1)
        self.keypad0_3 = QtWidgets.QPushButton(self.gridLayoutWidget_3)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.MinimumExpanding, QtWidgets.QSizePolicy.MinimumExpanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.keypad0_3.sizePolicy().hasHeightForWidth())
        self.keypad0_3.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(14)
        self.keypad0_3.setFont(font)
        self.keypad0_3.setStyleSheet("color: rgb(255, 255, 255);")
        self.keypad0_3.setObjectName("keypad0_3")
        self.gridLayout_3.addWidget(self.keypad0_3, 3, 1, 1, 1)
        self.keypad7_3 = QtWidgets.QPushButton(self.gridLayoutWidget_3)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.MinimumExpanding, QtWidgets.QSizePolicy.MinimumExpanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.keypad7_3.sizePolicy().hasHeightForWidth())
        self.keypad7_3.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(14)
        self.keypad7_3.setFont(font)
        self.keypad7_3.setStyleSheet("color: rgb(255, 255, 255);")
        self.keypad7_3.setObjectName("keypad7_3")
        self.gridLayout_3.addWidget(self.keypad7_3, 2, 0, 1, 1)
        self.keypadDecimal_3 = QtWidgets.QPushButton(self.gridLayoutWidget_3)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.MinimumExpanding, QtWidgets.QSizePolicy.MinimumExpanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.keypadDecimal_3.sizePolicy().hasHeightForWidth())
        self.keypadDecimal_3.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(11)
        self.keypadDecimal_3.setFont(font)
        self.keypadDecimal_3.setStyleSheet("color: rgb(255, 255, 255);")
        self.keypadDecimal_3.setObjectName("keypadDecimal_3")
        self.gridLayout_3.addWidget(self.keypadDecimal_3, 3, 0, 1, 1)
        self.keypadEnter_3 = QtWidgets.QPushButton(self.gridLayoutWidget_3)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.MinimumExpanding, QtWidgets.QSizePolicy.MinimumExpanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.keypadEnter_3.sizePolicy().hasHeightForWidth())
        self.keypadEnter_3.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(11)
        self.keypadEnter_3.setFont(font)
        self.keypadEnter_3.setStyleSheet("color: rgb(255, 255, 255);")
        self.keypadEnter_3.setObjectName("keypadEnter_3")
        self.gridLayout_3.addWidget(self.keypadEnter_3, 3, 2, 1, 1)
        self.keypad1_3 = QtWidgets.QPushButton(self.gridLayoutWidget_3)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.MinimumExpanding, QtWidgets.QSizePolicy.MinimumExpanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.keypad1_3.sizePolicy().hasHeightForWidth())
        self.keypad1_3.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(14)
        self.keypad1_3.setFont(font)
        self.keypad1_3.setContextMenuPolicy(QtCore.Qt.NoContextMenu)
        self.keypad1_3.setStyleSheet("color: rgb(255, 255, 255);")
        self.keypad1_3.setIconSize(QtCore.QSize(20, 20))
        self.keypad1_3.setAutoRepeatDelay(293)
        self.keypad1_3.setObjectName("keypad1_3")
        self.gridLayout_3.addWidget(self.keypad1_3, 0, 0, 1, 1)
        self.keypad3_3 = QtWidgets.QPushButton(self.gridLayoutWidget_3)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.MinimumExpanding, QtWidgets.QSizePolicy.MinimumExpanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.keypad3_3.sizePolicy().hasHeightForWidth())
        self.keypad3_3.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(14)
        self.keypad3_3.setFont(font)
        self.keypad3_3.setStyleSheet("color: rgb(255, 255, 255);")
        self.keypad3_3.setObjectName("keypad3_3")
        self.gridLayout_3.addWidget(self.keypad3_3, 0, 2, 1, 1)
        self.keypad6_3 = QtWidgets.QPushButton(self.gridLayoutWidget_3)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.MinimumExpanding, QtWidgets.QSizePolicy.MinimumExpanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.keypad6_3.sizePolicy().hasHeightForWidth())
        self.keypad6_3.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(14)
        self.keypad6_3.setFont(font)
        self.keypad6_3.setStyleSheet("color: rgb(255, 255, 255);")
        self.keypad6_3.setObjectName("keypad6_3")
        self.gridLayout_3.addWidget(self.keypad6_3, 1, 2, 1, 1)
        self.keypad5_3 = QtWidgets.QPushButton(self.gridLayoutWidget_3)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.MinimumExpanding, QtWidgets.QSizePolicy.MinimumExpanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.keypad5_3.sizePolicy().hasHeightForWidth())
        self.keypad5_3.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(14)
        self.keypad5_3.setFont(font)
        self.keypad5_3.setStyleSheet("color: rgb(255, 255, 255);")
        self.keypad5_3.setObjectName("keypad5_3")
        self.gridLayout_3.addWidget(self.keypad5_3, 1, 1, 1, 1)
        self.label_13 = QtWidgets.QLabel(self.setSchedule1)
        self.label_13.setEnabled(True)
        self.label_13.setGeometry(QtCore.QRect(270, 60, 71, 31))
        font = QtGui.QFont()
        font.setFamily("Sitka Subheading")
        font.setPointSize(14)
        font.setBold(False)
        self.label_13.setFont(font)
        self.label_13.setStyleSheet("color: rgb(255, 255, 255);")
        self.label_13.setObjectName("label_13")
        self.setMarkSchedule1 = QtWidgets.QLabel(self.setSchedule1)
        self.setMarkSchedule1.setEnabled(True)
        self.setMarkSchedule1.setGeometry(QtCore.QRect(30, 70, 161, 61))
        font = QtGui.QFont()
        font.setFamily("Sitka Subheading")
        font.setPointSize(14)
        font.setBold(False)
        self.setMarkSchedule1.setFont(font)
        self.setMarkSchedule1.setObjectName("setMarkSchedule1")
        self.keypadClear_3 = QtWidgets.QPushButton(self.setSchedule1)
        self.keypadClear_3.setGeometry(QtCore.QRect(270, 100, 71, 41))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.MinimumExpanding, QtWidgets.QSizePolicy.MinimumExpanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.keypadClear_3.sizePolicy().hasHeightForWidth())
        self.keypadClear_3.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(14)
        font.setBold(True)
        self.keypadClear_3.setFont(font)
        self.keypadClear_3.setStyleSheet("color: rgb(255, 255, 255);")
        self.keypadClear_3.setObjectName("keypadClear_3")
        self.tooLargeLabelSchedule1 = QtWidgets.QLabel(self.setSchedule1)
        self.tooLargeLabelSchedule1.setEnabled(True)
        self.tooLargeLabelSchedule1.setGeometry(QtCore.QRect(10, 60, 101, 71))
        font = QtGui.QFont()
        font.setFamily("Sitka Subheading")
        font.setPointSize(14)
        font.setBold(False)
        self.tooLargeLabelSchedule1.setFont(font)
        self.tooLargeLabelSchedule1.setStyleSheet("color: rgb(255, 0, 0);")
        self.tooLargeLabelSchedule1.setTextFormat(QtCore.Qt.AutoText)
        self.tooLargeLabelSchedule1.setScaledContents(False)
        self.tooLargeLabelSchedule1.setWordWrap(True)
        self.tooLargeLabelSchedule1.setObjectName("tooLargeLabelSchedule1")
        self.manualSetSchedule1LCD = QtWidgets.QLCDNumber(self.setSchedule1)
        self.manualSetSchedule1LCD.setGeometry(QtCore.QRect(100, 70, 161, 61))
        self.manualSetSchedule1LCD.setStyleSheet("color: rgb(255, 255, 255);")
        self.manualSetSchedule1LCD.setObjectName("manualSetSchedule1LCD")
        self.line_6 = QtWidgets.QFrame(self.setSchedule1)
        self.line_6.setGeometry(QtCore.QRect(0, 40, 341, 20))
        self.line_6.setStyleSheet("color: rgb(255, 255, 255);")
        self.line_6.setFrameShadow(QtWidgets.QFrame.Plain)
        self.line_6.setLineWidth(3)
        self.line_6.setFrameShape(QtWidgets.QFrame.HLine)
        self.line_6.setObjectName("line_6")
        self.label_6 = QtWidgets.QLabel(self.setSchedule1)
        self.label_6.setGeometry(QtCore.QRect(0, 0, 341, 41))
        self.label_6.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.label_6.setStyleSheet("color: rgb(255, 255, 255);")
        self.label_6.setFrameShape(QtWidgets.QFrame.Panel)
        self.label_6.setAlignment(QtCore.Qt.AlignCenter)
        self.label_6.setObjectName("label_6")
        self.stackedWidget.addWidget(self.setSchedule1)
        self.setSchedule2 = QtWidgets.QWidget()
        self.setSchedule2.setObjectName("setSchedule2")
        self.gridLayoutWidget_4 = QtWidgets.QWidget(self.setSchedule2)
        self.gridLayoutWidget_4.setGeometry(QtCore.QRect(10, 150, 331, 261))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.MinimumExpanding, QtWidgets.QSizePolicy.MinimumExpanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.gridLayoutWidget_4.sizePolicy().hasHeightForWidth())
        self.gridLayoutWidget_4.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(14)
        self.gridLayoutWidget_4.setFont(font)
        self.gridLayoutWidget_4.setObjectName("gridLayoutWidget_4")
        self.gridLayout_8 = QtWidgets.QGridLayout(self.gridLayoutWidget_4)
        self.gridLayout_8.setContentsMargins(0, 0, 0, 0)
        self.gridLayout_8.setObjectName("gridLayout_8")
        self.keypad4_7 = QtWidgets.QPushButton(self.gridLayoutWidget_4)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.MinimumExpanding, QtWidgets.QSizePolicy.MinimumExpanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.keypad4_7.sizePolicy().hasHeightForWidth())
        self.keypad4_7.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(14)
        self.keypad4_7.setFont(font)
        self.keypad4_7.setStyleSheet("color: rgb(255, 255, 255);")
        self.keypad4_7.setObjectName("keypad4_7")
        self.gridLayout_8.addWidget(self.keypad4_7, 1, 0, 1, 1)
        self.keypad8_7 = QtWidgets.QPushButton(self.gridLayoutWidget_4)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.MinimumExpanding, QtWidgets.QSizePolicy.MinimumExpanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.keypad8_7.sizePolicy().hasHeightForWidth())
        self.keypad8_7.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(14)
        self.keypad8_7.setFont(font)
        self.keypad8_7.setStyleSheet("color: rgb(255, 255, 255);")
        self.keypad8_7.setObjectName("keypad8_7")
        self.gridLayout_8.addWidget(self.keypad8_7, 2, 1, 1, 1)
        self.keypad2_7 = QtWidgets.QPushButton(self.gridLayoutWidget_4)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.MinimumExpanding, QtWidgets.QSizePolicy.MinimumExpanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.keypad2_7.sizePolicy().hasHeightForWidth())
        self.keypad2_7.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(14)
        self.keypad2_7.setFont(font)
        self.keypad2_7.setStyleSheet("color: rgb(255, 255, 255);")
        self.keypad2_7.setObjectName("keypad2_7")
        self.gridLayout_8.addWidget(self.keypad2_7, 0, 1, 1, 1)
        self.keypad9_7 = QtWidgets.QPushButton(self.gridLayoutWidget_4)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.MinimumExpanding, QtWidgets.QSizePolicy.MinimumExpanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.keypad9_7.sizePolicy().hasHeightForWidth())
        self.keypad9_7.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(14)
        self.keypad9_7.setFont(font)
        self.keypad9_7.setStyleSheet("color: rgb(255, 255, 255);")
        self.keypad9_7.setObjectName("keypad9_7")
        self.gridLayout_8.addWidget(self.keypad9_7, 2, 2, 1, 1)
        self.keypad0_7 = QtWidgets.QPushButton(self.gridLayoutWidget_4)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.MinimumExpanding, QtWidgets.QSizePolicy.MinimumExpanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.keypad0_7.sizePolicy().hasHeightForWidth())
        self.keypad0_7.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(14)
        self.keypad0_7.setFont(font)
        self.keypad0_7.setStyleSheet("color: rgb(255, 255, 255);")
        self.keypad0_7.setObjectName("keypad0_7")
        self.gridLayout_8.addWidget(self.keypad0_7, 3, 1, 1, 1)
        self.keypad7_7 = QtWidgets.QPushButton(self.gridLayoutWidget_4)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.MinimumExpanding, QtWidgets.QSizePolicy.MinimumExpanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.keypad7_7.sizePolicy().hasHeightForWidth())
        self.keypad7_7.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(14)
        self.keypad7_7.setFont(font)
        self.keypad7_7.setStyleSheet("color: rgb(255, 255, 255);")
        self.keypad7_7.setObjectName("keypad7_7")
        self.gridLayout_8.addWidget(self.keypad7_7, 2, 0, 1, 1)
        self.keypadDecimal_7 = QtWidgets.QPushButton(self.gridLayoutWidget_4)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.MinimumExpanding, QtWidgets.QSizePolicy.MinimumExpanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.keypadDecimal_7.sizePolicy().hasHeightForWidth())
        self.keypadDecimal_7.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(11)
        self.keypadDecimal_7.setFont(font)
        self.keypadDecimal_7.setStyleSheet("color: rgb(255, 255, 255);")
        self.keypadDecimal_7.setObjectName("keypadDecimal_7")
        self.gridLayout_8.addWidget(self.keypadDecimal_7, 3, 0, 1, 1)
        self.keypadEnter_7 = QtWidgets.QPushButton(self.gridLayoutWidget_4)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.MinimumExpanding, QtWidgets.QSizePolicy.MinimumExpanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.keypadEnter_7.sizePolicy().hasHeightForWidth())
        self.keypadEnter_7.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(11)
        self.keypadEnter_7.setFont(font)
        self.keypadEnter_7.setStyleSheet("color: rgb(255, 255, 255);")
        self.keypadEnter_7.setObjectName("keypadEnter_7")
        self.gridLayout_8.addWidget(self.keypadEnter_7, 3, 2, 1, 1)
        self.keypad1_7 = QtWidgets.QPushButton(self.gridLayoutWidget_4)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.MinimumExpanding, QtWidgets.QSizePolicy.MinimumExpanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.keypad1_7.sizePolicy().hasHeightForWidth())
        self.keypad1_7.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(14)
        self.keypad1_7.setFont(font)
        self.keypad1_7.setContextMenuPolicy(QtCore.Qt.NoContextMenu)
        self.keypad1_7.setStyleSheet("color: rgb(255, 255, 255);")
        self.keypad1_7.setIconSize(QtCore.QSize(20, 20))
        self.keypad1_7.setAutoRepeatDelay(293)
        self.keypad1_7.setObjectName("keypad1_7")
        self.gridLayout_8.addWidget(self.keypad1_7, 0, 0, 1, 1)
        self.keypad3_7 = QtWidgets.QPushButton(self.gridLayoutWidget_4)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.MinimumExpanding, QtWidgets.QSizePolicy.MinimumExpanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.keypad3_7.sizePolicy().hasHeightForWidth())
        self.keypad3_7.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(14)
        self.keypad3_7.setFont(font)
        self.keypad3_7.setStyleSheet("color: rgb(255, 255, 255);")
        self.keypad3_7.setObjectName("keypad3_7")
        self.gridLayout_8.addWidget(self.keypad3_7, 0, 2, 1, 1)
        self.keypad6_7 = QtWidgets.QPushButton(self.gridLayoutWidget_4)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.MinimumExpanding, QtWidgets.QSizePolicy.MinimumExpanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.keypad6_7.sizePolicy().hasHeightForWidth())
        self.keypad6_7.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(14)
        self.keypad6_7.setFont(font)
        self.keypad6_7.setStyleSheet("color: rgb(255, 255, 255);")
        self.keypad6_7.setObjectName("keypad6_7")
        self.gridLayout_8.addWidget(self.keypad6_7, 1, 2, 1, 1)
        self.keypad5_7 = QtWidgets.QPushButton(self.gridLayoutWidget_4)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.MinimumExpanding, QtWidgets.QSizePolicy.MinimumExpanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.keypad5_7.sizePolicy().hasHeightForWidth())
        self.keypad5_7.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(14)
        self.keypad5_7.setFont(font)
        self.keypad5_7.setStyleSheet("color: rgb(255, 255, 255);")
        self.keypad5_7.setObjectName("keypad5_7")
        self.gridLayout_8.addWidget(self.keypad5_7, 1, 1, 1, 1)
        self.tooLargeLabelSchedule2 = QtWidgets.QLabel(self.setSchedule2)
        self.tooLargeLabelSchedule2.setEnabled(True)
        self.tooLargeLabelSchedule2.setGeometry(QtCore.QRect(10, 60, 101, 71))
        font = QtGui.QFont()
        font.setFamily("Sitka Subheading")
        font.setPointSize(14)
        font.setBold(False)
        self.tooLargeLabelSchedule2.setFont(font)
        self.tooLargeLabelSchedule2.setTextFormat(QtCore.Qt.AutoText)
        self.tooLargeLabelSchedule2.setScaledContents(False)
        self.tooLargeLabelSchedule2.setWordWrap(True)
        self.tooLargeLabelSchedule2.setObjectName("tooLargeLabelSchedule2")
        self.label_14 = QtWidgets.QLabel(self.setSchedule2)
        self.label_14.setEnabled(True)
        self.label_14.setGeometry(QtCore.QRect(270, 60, 71, 31))
        font = QtGui.QFont()
        font.setFamily("Sitka Subheading")
        font.setPointSize(14)
        font.setBold(False)
        self.label_14.setFont(font)
        self.label_14.setStyleSheet("color: rgb(255, 255, 255);")
        self.label_14.setObjectName("label_14")
        self.label_15 = QtWidgets.QLabel(self.setSchedule2)
        self.label_15.setGeometry(QtCore.QRect(0, 0, 341, 41))
        self.label_15.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.label_15.setStyleSheet("color: rgb(255, 255, 255);")
        self.label_15.setFrameShape(QtWidgets.QFrame.Panel)
        self.label_15.setAlignment(QtCore.Qt.AlignCenter)
        self.label_15.setObjectName("label_15")
        self.line_8 = QtWidgets.QFrame(self.setSchedule2)
        self.line_8.setGeometry(QtCore.QRect(0, 40, 341, 20))
        self.line_8.setStyleSheet("color: rgb(255, 255, 255);")
        self.line_8.setFrameShadow(QtWidgets.QFrame.Plain)
        self.line_8.setLineWidth(3)
        self.line_8.setFrameShape(QtWidgets.QFrame.HLine)
        self.line_8.setObjectName("line_8")
        self.keypadClear_4 = QtWidgets.QPushButton(self.setSchedule2)
        self.keypadClear_4.setGeometry(QtCore.QRect(270, 100, 71, 41))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.MinimumExpanding, QtWidgets.QSizePolicy.MinimumExpanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.keypadClear_4.sizePolicy().hasHeightForWidth())
        self.keypadClear_4.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(14)
        font.setBold(True)
        self.keypadClear_4.setFont(font)
        self.keypadClear_4.setStyleSheet("color: rgb(255, 255, 255);")
        self.keypadClear_4.setObjectName("keypadClear_4")
        self.manualSetSchedule2LCD = QtWidgets.QLCDNumber(self.setSchedule2)
        self.manualSetSchedule2LCD.setGeometry(QtCore.QRect(100, 70, 161, 61))
        self.manualSetSchedule2LCD.setStyleSheet("color: rgb(255, 255, 255);")
        self.manualSetSchedule2LCD.setObjectName("manualSetSchedule2LCD")
        self.setMarkSchedule2 = QtWidgets.QLabel(self.setSchedule2)
        self.setMarkSchedule2.setEnabled(True)
        self.setMarkSchedule2.setGeometry(QtCore.QRect(30, 70, 161, 61))
        font = QtGui.QFont()
        font.setFamily("Sitka Subheading")
        font.setPointSize(14)
        font.setBold(False)
        self.setMarkSchedule2.setFont(font)
        self.setMarkSchedule2.setObjectName("setMarkSchedule2")
        self.setMarkSchedule2.raise_()
        self.gridLayoutWidget_4.raise_()
        self.label_14.raise_()
        self.line_8.raise_()
        self.keypadClear_4.raise_()
        self.label_15.raise_()
        self.tooLargeLabelSchedule2.raise_()
        self.manualSetSchedule2LCD.raise_()
        self.stackedWidget.addWidget(self.setSchedule2)
        self.setSchedule3 = QtWidgets.QWidget()
        self.setSchedule3.setObjectName("setSchedule3")
        self.gridLayoutWidget_5 = QtWidgets.QWidget(self.setSchedule3)
        self.gridLayoutWidget_5.setGeometry(QtCore.QRect(0, 0, 351, 421))
        self.gridLayoutWidget_5.setObjectName("gridLayoutWidget_5")
        self.gridLayout_9 = QtWidgets.QGridLayout(self.gridLayoutWidget_5)
        self.gridLayout_9.setContentsMargins(0, 0, 0, 0)
        self.gridLayout_9.setObjectName("gridLayout_9")
        self.buttonLinear = QtWidgets.QPushButton(self.gridLayoutWidget_5)
        self.buttonLinear.setMaximumSize(QtCore.QSize(150, 150))
        font = QtGui.QFont()
        font.setPointSize(18)
        font.setBold(True)
        self.buttonLinear.setFont(font)
        self.buttonLinear.setStyleSheet("color: rgb(255, 255, 255);")
        self.buttonLinear.setObjectName("buttonLinear")
        self.gridLayout_9.addWidget(self.buttonLinear, 0, 0, 1, 1)
        self.buttonSteps = QtWidgets.QPushButton(self.gridLayoutWidget_5)
        self.buttonSteps.setMaximumSize(QtCore.QSize(150, 150))
        font = QtGui.QFont()
        font.setPointSize(18)
        font.setBold(True)
        self.buttonSteps.setFont(font)
        self.buttonSteps.setStyleSheet("color: rgb(255, 255, 255);")
        self.buttonSteps.setObjectName("buttonSteps")
        self.gridLayout_9.addWidget(self.buttonSteps, 1, 0, 1, 1)
        self.stackedWidget.addWidget(self.setSchedule3)
        self.tensionHistory = QtWidgets.QWidget()
        self.tensionHistory.setObjectName("tensionHistory")
        self.label_7 = QtWidgets.QLabel(self.tensionHistory)
        self.label_7.setGeometry(QtCore.QRect(0, 0, 341, 41))
        self.label_7.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.label_7.setFrameShape(QtWidgets.QFrame.Panel)
        self.label_7.setAlignment(QtCore.Qt.AlignCenter)
        self.label_7.setObjectName("label_7")
        self.line_7 = QtWidgets.QFrame(self.tensionHistory)
        self.line_7.setGeometry(QtCore.QRect(0, 40, 341, 20))
        self.line_7.setFrameShadow(QtWidgets.QFrame.Plain)
        self.line_7.setLineWidth(3)
        self.line_7.setFrameShape(QtWidgets.QFrame.HLine)
        self.line_7.setObjectName("line_7")
        self.graphWidget = PlotWidget(self.tensionHistory)
        self.graphWidget.setGeometry(QtCore.QRect(0, 190, 341, 211))
        self.graphWidget.setObjectName("graphWidget")
        self.ScheduleSetpointLCD = QtWidgets.QLCDNumber(self.tensionHistory)
        self.ScheduleSetpointLCD.setGeometry(QtCore.QRect(180, 60, 161, 61))
        self.ScheduleSetpointLCD.setStyleSheet("color: rgb(255, 255, 255);")
        self.ScheduleSetpointLCD.setObjectName("ScheduleSetpointLCD")
        self.label_5 = QtWidgets.QLabel(self.tensionHistory)
        self.label_5.setGeometry(QtCore.QRect(0, 60, 251, 51))
        self.label_5.setStyleSheet("color: rgb(255, 255, 255);")
        self.label_5.setObjectName("label_5")
        self.label_8 = QtWidgets.QLabel(self.tensionHistory)
        self.label_8.setGeometry(QtCore.QRect(0, 120, 251, 51))
        self.label_8.setStyleSheet("color: rgb(255, 255, 255);")
        self.label_8.setObjectName("label_8")
        self.ScheduleTimeLCD = QtWidgets.QLCDNumber(self.tensionHistory)
        self.ScheduleTimeLCD.setGeometry(QtCore.QRect(180, 120, 161, 61))
        self.ScheduleTimeLCD.setStyleSheet("color: rgb(255, 255, 255);")
        self.ScheduleTimeLCD.setObjectName("ScheduleTimeLCD")
        self.line_7.raise_()
        self.graphWidget.raise_()
        self.label_7.raise_()
        self.label_5.raise_()
        self.label_8.raise_()
        self.ScheduleSetpointLCD.raise_()
        self.ScheduleTimeLCD.raise_()
        self.stackedWidget.addWidget(self.tensionHistory)
        self.verticalLayoutWidget = QtWidgets.QWidget(Form)
        self.verticalLayoutWidget.setGeometry(QtCore.QRect(310, 10, 95, 431))
        self.verticalLayoutWidget.setObjectName("verticalLayoutWidget")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.verticalLayoutWidget)
        self.verticalLayout.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout.setObjectName("verticalLayout")
        self.setTensionButton = QtWidgets.QPushButton(self.verticalLayoutWidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.MinimumExpanding, QtWidgets.QSizePolicy.MinimumExpanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.setTensionButton.sizePolicy().hasHeightForWidth())
        self.setTensionButton.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        self.setTensionButton.setFont(font)
        self.setTensionButton.setStyleSheet("color: rgb(255, 255, 255);")
        self.setTensionButton.setObjectName("setTensionButton")
        self.verticalLayout.addWidget(self.setTensionButton)
        self.setTimeDelayButton = QtWidgets.QPushButton(self.verticalLayoutWidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.MinimumExpanding, QtWidgets.QSizePolicy.MinimumExpanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.setTimeDelayButton.sizePolicy().hasHeightForWidth())
        self.setTimeDelayButton.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(14)
        self.setTimeDelayButton.setFont(font)
        self.setTimeDelayButton.setMouseTracking(False)
        self.setTimeDelayButton.setStyleSheet("color: rgb(255, 255, 255);")
        self.setTimeDelayButton.setObjectName("setTimeDelayButton")
        self.verticalLayout.addWidget(self.setTimeDelayButton)
        self.setScheduleButton = QtWidgets.QPushButton(self.verticalLayoutWidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.MinimumExpanding, QtWidgets.QSizePolicy.MinimumExpanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.setScheduleButton.sizePolicy().hasHeightForWidth())
        self.setScheduleButton.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.setScheduleButton.setFont(font)
        self.setScheduleButton.setStyleSheet("color: rgb(255, 255, 255);")
        self.setScheduleButton.setObjectName("setScheduleButton")
        self.verticalLayout.addWidget(self.setScheduleButton)
        self.tensionHistoryButton = QtWidgets.QPushButton(self.verticalLayoutWidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.MinimumExpanding, QtWidgets.QSizePolicy.MinimumExpanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.tensionHistoryButton.sizePolicy().hasHeightForWidth())
        self.tensionHistoryButton.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(14)
        self.tensionHistoryButton.setFont(font)
        self.tensionHistoryButton.setStyleSheet("color: rgb(255, 255, 255);")
        self.tensionHistoryButton.setObjectName("tensionHistoryButton")
        self.verticalLayout.addWidget(self.tensionHistoryButton)
        self.label_10 = QtWidgets.QLabel(Form)
        self.label_10.setGeometry(QtCore.QRect(140, 320, 31, 16))
        self.label_10.setStyleSheet("color: rgb(255, 255, 255);")
        self.label_10.setObjectName("label_10")
        self.label_11 = QtWidgets.QLabel(Form)
        self.label_11.setGeometry(QtCore.QRect(240, 410, 41, 16))
        self.label_11.setStyleSheet("color: rgb(255, 255, 255);\n"
"")
        self.label_11.setObjectName("label_11")
        self.labelScheduleMode = QtWidgets.QLabel(Form)
        self.labelScheduleMode.setGeometry(QtCore.QRect(30, 220, 221, 31))
        self.labelScheduleMode.setStyleSheet("color: rgb(255, 255, 255);")
        self.labelScheduleMode.setObjectName("labelScheduleMode")

        self.retranslateUi(Form)
        self.stackedWidget.setCurrentIndex(5)
        QtCore.QMetaObject.connectSlotsByName(Form)

    def retranslateUi(self, Form):
        _translate = QtCore.QCoreApplication.translate
        Form.setWindowTitle(_translate("Form", "Form"))
        self.label_3.setText(_translate("Form", "<html><head/><body><p><span style=\" font-size:10pt;\">Sample Rate:</span></p></body></html>"))
        self.label_2.setText(_translate("Form", "<html><head/><body><p><span style=\" font-size:14pt;\">Set Tension: </span></p></body></html>"))
        self.label.setText(_translate("Form", "<html><head/><body><p><span style=\" font-size:20pt;\">Current Tension:</span></p></body></html>"))
        self.tensionUp.setText(_translate("Form", "+"))
        self.tensionDown.setText(_translate("Form", "-"))
        self.keypad4.setText(_translate("Form", "4"))
        self.keypad8.setText(_translate("Form", "8"))
        self.keypad2.setText(_translate("Form", "2"))
        self.keypad9.setText(_translate("Form", "9"))
        self.keypad0.setText(_translate("Form", "0"))
        self.keypad7.setText(_translate("Form", "7"))
        self.keypadDecimal.setText(_translate("Form", "."))
        self.keypadEnter.setText(_translate("Form", "ENTER"))
        self.keypad1.setText(_translate("Form", "1"))
        self.keypad3.setText(_translate("Form", "3"))
        self.keypad6.setText(_translate("Form", "6"))
        self.keypad5.setText(_translate("Form", "5"))
        self.label_16.setText(_translate("Form", "<html><head/><body><p><span style=\" font-size:12pt; font-weight:600;\">Set Tension: </span></p></body></html>"))
        self.keypadClear_5.setText(_translate("Form", "Clear"))
        self.setMarkTension.setText(_translate("Form", "<html><head/><body><p><span style=\" color:#ff0303;\">Set.</span></p></body></html>"))
        self.tooLargeLabelTension.setText(_translate("Form", "<html><head/><body><p><span style=\" font-size:10pt; color:#ff0000;\">Entry must be &lt;50 lbs. </span></p></body></html>"))
        self.label_17.setText(_translate("Form", "Lbs. "))
        self.keypad0_2.setText(_translate("Form", "0"))
        self.keypad2_2.setText(_translate("Form", "2"))
        self.keypad9_2.setText(_translate("Form", "9"))
        self.keypad1_2.setText(_translate("Form", "1"))
        self.keypad4_2.setText(_translate("Form", "4"))
        self.keypadEnter_2.setText(_translate("Form", "ENTER"))
        self.keypad8_2.setText(_translate("Form", "8"))
        self.keypad6_2.setText(_translate("Form", "6"))
        self.keypad3_2.setText(_translate("Form", "3"))
        self.keypadDecimal_2.setText(_translate("Form", "."))
        self.keypad5_2.setText(_translate("Form", "5"))
        self.keypad7_2.setText(_translate("Form", "7"))
        self.label_18.setText(_translate("Form", "<html><head/><body><p><span style=\" font-size:12pt; font-weight:600;\">Set Adjustment Delay:</span></p></body></html>"))
        self.keypadClear_6.setText(_translate("Form", "Clear"))
        self.setMarkDelay.setText(_translate("Form", "<html><head/><body><p><span style=\" color:#ff0303;\">Set.</span></p></body></html>"))
        self.tooLargeLabelDelay.setText(_translate("Form", "<html><head/><body><p><span style=\" font-size:10pt; color:#ff0303;\">Entry must be &lt;600 sec. </span></p></body></html>"))
        self.label_19.setText(_translate("Form", "sec."))
        self.keypad4_3.setText(_translate("Form", "4"))
        self.keypad8_3.setText(_translate("Form", "8"))
        self.keypad2_3.setText(_translate("Form", "2"))
        self.keypad9_3.setText(_translate("Form", "9"))
        self.keypad0_3.setText(_translate("Form", "0"))
        self.keypad7_3.setText(_translate("Form", "7"))
        self.keypadDecimal_3.setText(_translate("Form", "."))
        self.keypadEnter_3.setText(_translate("Form", "ENTER"))
        self.keypad1_3.setText(_translate("Form", "1"))
        self.keypad3_3.setText(_translate("Form", "3"))
        self.keypad6_3.setText(_translate("Form", "6"))
        self.keypad5_3.setText(_translate("Form", "5"))
        self.label_13.setText(_translate("Form", "Lbs. "))
        self.setMarkSchedule1.setText(_translate("Form", "<html><head/><body><p><span style=\" color:#ff0303;\">Set.</span></p></body></html>"))
        self.keypadClear_3.setText(_translate("Form", "Clear"))
        self.tooLargeLabelSchedule1.setText(_translate("Form", "<html><head/><body><p><span style=\" font-size:10pt; color:#ff0303;\">Entry must be &lt;50 lbs. </span></p></body></html>"))
        self.label_6.setText(_translate("Form", "<html><head/><body><p><span style=\" font-size:12pt; font-weight:600;\">Set Scheduled Tension:</span></p></body></html>"))
        self.keypad4_7.setText(_translate("Form", "4"))
        self.keypad8_7.setText(_translate("Form", "8"))
        self.keypad2_7.setText(_translate("Form", "2"))
        self.keypad9_7.setText(_translate("Form", "9"))
        self.keypad0_7.setText(_translate("Form", "0"))
        self.keypad7_7.setText(_translate("Form", "7"))
        self.keypadDecimal_7.setText(_translate("Form", "."))
        self.keypadEnter_7.setText(_translate("Form", "ENTER"))
        self.keypad1_7.setText(_translate("Form", "1"))
        self.keypad3_7.setText(_translate("Form", "3"))
        self.keypad6_7.setText(_translate("Form", "6"))
        self.keypad5_7.setText(_translate("Form", "5"))
        self.tooLargeLabelSchedule2.setText(_translate("Form", "<html><head/><body><p><span style=\" font-size:10pt; color:#ff0303;\">Entry must be &lt;24 hours.</span></p></body></html>"))
        self.label_14.setText(_translate("Form", "Hours"))
        self.label_15.setText(_translate("Form", "<html><head/><body><p><span style=\" font-size:12pt; font-weight:600;\">Set Scheduled Time:</span></p></body></html>"))
        self.keypadClear_4.setText(_translate("Form", "Clear"))
        self.setMarkSchedule2.setText(_translate("Form", "<html><head/><body><p><span style=\" color:#ff0303;\">Set.</span></p></body></html>"))
        self.buttonLinear.setText(_translate("Form", "Linear"))
        self.buttonSteps.setText(_translate("Form", "Steps"))
        self.label_7.setText(_translate("Form", "<html><head/><body><p><span style=\" font-size:16pt; font-weight:600;\">Tension Chart:</span></p></body></html>"))
        self.label_5.setText(_translate("Form", "<html><head/><body><p><span style=\" font-size:16pt;\">Schedule Setpoint:</span></p></body></html>"))
        self.label_8.setText(_translate("Form", "<html><head/><body><p><span style=\" font-size:16pt;\">Schedule Time:</span></p></body></html>"))
        self.setTensionButton.setText(_translate("Form", "Tension"))
        self.setTimeDelayButton.setText(_translate("Form", "Rate"))
        self.setScheduleButton.setText(_translate("Form", "Schedule"))
        self.tensionHistoryButton.setText(_translate("Form", "Chart"))
        self.label_10.setText(_translate("Form", "<html><head/><body><p><span style=\" font-size:9pt;\">Lbs.</span></p></body></html>"))
        self.label_11.setText(_translate("Form", "<html><head/><body><p><span style=\" font-size:9pt;\">Secs.</span></p></body></html>"))
        self.labelScheduleMode.setText(_translate("Form", "<html><head/><body><p><span style=\" font-size:14pt;\">Schedule Mode: None</span></p></body></html>"))
from pyqtgraph import PlotWidget

""" 
##########################################

Main Running Code

##########################################
"""



class scoliosisUi(QWidget):
    def __init__(self):
        super(scoliosisUi, self).__init__()
        self.main_win = QMainWindow()
        self.ui = Ui_Form()
        self.ui.setupUi(self.main_win)

        # GPIO Pins
        self.increase_tension = 22 # Stop_R
        self.decrease_tension = 27 # Stop L
        self.slow_mode = 17 # HOME
        self.output_pins = [self.increase_tension , self.decrease_tension , self.slow_mode]

        # GPIO Setup
        GPIO.setwarnings(False)
        GPIO.setmode(GPIO.BCM)
        GPIO.setup(self.increase_tension , GPIO.OUT)
        GPIO.setup(self.decrease_tension , GPIO.OUT)
        GPIO.setup(self.slow_mode , GPIO.OUT)
        
        # Default the output pins to low
        for i in self.output_pins:
            GPIO.output(i , GPIO.LOW)  

        # Initializations for keypads
        self.decimal_1 = False
        self.maxPrecision_1 = False
        self.ui.setMarkTension.setHidden(True)
        self.ui.tooLargeLabelTension.setHidden(True)

        self.decimal_2 = False
        self.maxPrecision_2 = False
        self.ui.setMarkDelay.setHidden(True)
        self.ui.tooLargeLabelDelay.setHidden(True)

        self.decimal_3 = False
        self.maxPrecision_3 = False
        self.ui.setMarkSchedule1.setHidden(True)
        self.ui.tooLargeLabelSchedule1.setHidden(True)

        self.decimal_4 = False
        self.maxPrecision_4 = False
        self.ui.setMarkSchedule2.setHidden(True)
        self.ui.tooLargeLabelSchedule2.setHidden(True)

        # Initializations for hx711
        self.referenceUnit = -66090
        setHX711 = False
        if setHX711:
            self.hx = HX711(5, 6)
            self.hx.set_reading_format("MSB", "MSB")
            self.hx.set_reference_unit(self.referenceUnit)
            self.hx.reset()
            self.hx.tare()
        
        # Range of deadband and slow mode
        self.dead_band_range = 1.0
        self.slow_mode_range = 5.0

        # Schedule initialization
        self.scheduleOn = False
        
        # JSON SERVER SETUP
        import base64
        import math
        import time

        # Set your GitHub Personal Access Token and the repository information
        self.access_token = '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'
        self.repository_owner = 'ColeMalinchock1'
        self.repository_name = 'HGT-JSON-Server'

        # Path to local json file and the name of json file on GitHub
        self.file_path = "./HGT_Data.json"
        self.file_backup_path = "./HGT_Backup.json"

        # Define the API endpoint for creating a new file
        self.api_url = f'https://api.github.com/repos/{self.repository_owner}/{self.repository_name}/contents/{self.file_path}'
        self.api_backup_url = f'https://api.github.com/repos/{self.repository_owner}/{self.repository_name}/contents/{self.file_backup_path}'

        self.headers = {
        'Authorization': f'token {self.access_token}'
        }

        self.patient1_name = "Cole Malinchock"
        self.patient1_age = "20"
        self.patient1_guardian = "Mike and Laura Malinchock"
        self.patient1_number = "919-240-4776"

        self.patient2_name = "John Bullock"
        self.patient2_age = "12"
        self.patient2_guardian = "Amy and Kelley Bullock"
        self.patient2_number = "919-547-3245"

        self.patient1_info = {
        "name": self.patient1_name,
        "age": self.patient1_age,
        "guardian": self.patient1_guardian,
        "phone number": self.patient1_number
        }

        self.patient2_info = {
        "name": self.patient2_name,
        "age": self.patient2_age,
        "guardian": self.patient2_guardian,
        "phone number": self.patient2_number
        }

        self.keep_waiting = False
        self.last_time_JSON = time.time()
            

        # Arrays for tension history
        self.timeArray = []
        self.timeArrayCounter = 0
        self.currentTensionArray = []
        self.setTensionArray = []
        self.last_time_array = time.time()

        # Defaults to setTension widget
        self.ui.stackedWidget.setCurrentWidget(self.ui.setTension)

        # Buttons for switching between windows
        self.ui.setTensionButton.clicked.connect(self.showSetTension)
        self.ui.setTimeDelayButton.clicked.connect(self.showSetTimeDelay)
        self.ui.setScheduleButton.clicked.connect(self.showSetSchedule1)
        self.ui.tensionHistoryButton.clicked.connect(self.showTensionHistory)


        # Connect up and down buttons to setweight
        self.setWeight = 0.00
        self.ui.tensionUp.clicked.connect(self.doTensionUp)
        self.ui.tensionDown.clicked.connect(self.doTensionDown)
        self.ui.setTensionLCD.display(self.setWeight)

        # Set Time Delay Variable
        self.setTimeDelay = 0.00
        self.ui.timeDelayLCD.display(self.setTimeDelay)
        self.last_time_delay = time.time()

        # Initializing count between each cycle
        self.count = 0

        # Artificial weight
        self.val = 0

        # MANUAL SET TENSION SCREEN #
        self.ui.keypad1.clicked.connect(lambda: self.manualSetTension(1))
        self.ui.keypad2.clicked.connect(lambda: self.manualSetTension(2))
        self.ui.keypad3.clicked.connect(lambda: self.manualSetTension(3))
        self.ui.keypad4.clicked.connect(lambda: self.manualSetTension(4))
        self.ui.keypad5.clicked.connect(lambda: self.manualSetTension(5))
        self.ui.keypad6.clicked.connect(lambda: self.manualSetTension(6))
        self.ui.keypad7.clicked.connect(lambda: self.manualSetTension(7))
        self.ui.keypad8.clicked.connect(lambda: self.manualSetTension(8))
        self.ui.keypad9.clicked.connect(lambda: self.manualSetTension(9))
        self.ui.keypad0.clicked.connect(lambda: self.manualSetTension(0))
        self.ui.keypadEnter.clicked.connect(lambda: self.manualSetTension(11))
        self.ui.keypadDecimal.clicked.connect(lambda: self.manualSetTension(12))
        self.ui.keypadClear_5.clicked.connect(lambda: self.manualSetTension(13))

        # MANUAL SET TIME DELAY SCREEN #
        self.ui.keypad1_2.clicked.connect(lambda: self.manualSetTimeDelay(1))
        self.ui.keypad2_2.clicked.connect(lambda: self.manualSetTimeDelay(2))
        self.ui.keypad3_2.clicked.connect(lambda: self.manualSetTimeDelay(3))
        self.ui.keypad4_2.clicked.connect(lambda: self.manualSetTimeDelay(4))
        self.ui.keypad5_2.clicked.connect(lambda: self.manualSetTimeDelay(5))
        self.ui.keypad6_2.clicked.connect(lambda: self.manualSetTimeDelay(6))
        self.ui.keypad7_2.clicked.connect(lambda: self.manualSetTimeDelay(7))
        self.ui.keypad8_2.clicked.connect(lambda: self.manualSetTimeDelay(8))
        self.ui.keypad9_2.clicked.connect(lambda: self.manualSetTimeDelay(9))
        self.ui.keypad0_2.clicked.connect(lambda: self.manualSetTimeDelay(0))
        self.ui.keypadEnter_2.clicked.connect(lambda: self.manualSetTimeDelay(11))
        self.ui.keypadDecimal_2.clicked.connect(lambda: self.manualSetTimeDelay(12))
        self.ui.keypadClear_6.clicked.connect(lambda: self.manualSetTimeDelay(13))

        # MANUAL SET SCHEDULE1 SCREEN #
        self.ui.keypad1_3.clicked.connect(lambda: self.manualSetSchedule1(1))
        self.ui.keypad2_3.clicked.connect(lambda: self.manualSetSchedule1(2))
        self.ui.keypad3_3.clicked.connect(lambda: self.manualSetSchedule1(3))
        self.ui.keypad4_3.clicked.connect(lambda: self.manualSetSchedule1(4))
        self.ui.keypad5_3.clicked.connect(lambda: self.manualSetSchedule1(5))
        self.ui.keypad6_3.clicked.connect(lambda: self.manualSetSchedule1(6))
        self.ui.keypad7_3.clicked.connect(lambda: self.manualSetSchedule1(7))
        self.ui.keypad8_3.clicked.connect(lambda: self.manualSetSchedule1(8))
        self.ui.keypad9_3.clicked.connect(lambda: self.manualSetSchedule1(9))
        self.ui.keypad0_3.clicked.connect(lambda: self.manualSetSchedule1(0))
        self.ui.keypadEnter_3.clicked.connect(lambda: self.manualSetSchedule1(11))
        self.ui.keypadDecimal_3.clicked.connect(lambda: self.manualSetSchedule1(12))
        self.ui.keypadClear_3.clicked.connect(lambda: self.manualSetSchedule1(13))

        # MANUAL SET SCHEDULE2 SCREEN #
        self.ui.keypad1_7.clicked.connect(lambda: self.manualSetSchedule2(1))
        self.ui.keypad2_7.clicked.connect(lambda: self.manualSetSchedule2(2))
        self.ui.keypad3_7.clicked.connect(lambda: self.manualSetSchedule2(3))
        self.ui.keypad4_7.clicked.connect(lambda: self.manualSetSchedule2(4))
        self.ui.keypad5_7.clicked.connect(lambda: self.manualSetSchedule2(5))
        self.ui.keypad6_7.clicked.connect(lambda: self.manualSetSchedule2(6))
        self.ui.keypad7_7.clicked.connect(lambda: self.manualSetSchedule2(7))
        self.ui.keypad8_7.clicked.connect(lambda: self.manualSetSchedule2(8))
        self.ui.keypad9_7.clicked.connect(lambda: self.manualSetSchedule2(9))
        self.ui.keypad0_7.clicked.connect(lambda: self.manualSetSchedule2(0))
        self.ui.keypadEnter_7.clicked.connect(lambda: self.manualSetSchedule2(11))
        self.ui.keypadDecimal_7.clicked.connect(lambda: self.manualSetSchedule2(12))
        self.ui.keypadClear_4.clicked.connect(lambda: self.manualSetSchedule2(13))

        # MANUAL SET SCHEDULE3 SCREEN #
        self.ui.buttonLinear.clicked.connect(lambda: self.manualSetSchedule3(1))
        self.ui.buttonSteps.clicked.connect(lambda: self.manualSetSchedule3(2))

        # creating a timer object for graph test
        timer = QTimer(self)

        # adding action to timer
        # UPDATES EVERY 0.1 SECOND

        # Updating the measured weight
        timer.timeout.connect(self.updateWeight)

        # Updating the schedule
        timer.timeout.connect(self.updateSchedule)

        # The controller will actuate according to the measuremed weight
        timer.timeout.connect(self.controller)

        # Plot the readings
        timer.timeout.connect(self.plot_chart)

        # Publish the measured data to the JSON Server
        timer.timeout.connect(self.JSON_Server)

        # Updates every 0.1 second
        timer.start(100)

    def JSON_Server(self):
                import requests
                import json
                import base64
                # Making a GET request for current file from GitHub
                response = requests.get(self.api_url, headers=self.headers)
                response_backup = requests.get(self.api_backup_url , headers = self.headers)

                # If GET request is approved
                if response.status_code == 200 and response_backup.status_code == 200:

                        # Receiving current data
                        current_data = response.json()
                        current_sha = current_data['sha']

                        current_backup_data = response_backup.json()
                        current_backup_sha = current_backup_data['sha']

                        # Opening the GitHub file and getting the contents
                        with open(self.file_path , 'r') as file1 , open(self.file_backup_path , 'r') as file2:
                                updated_file_content = json.loads(file1.read())
                                updated_file_backup_content = json.loads(file2.read())

                        # Getting time
                        timer = time.time()

                        # Getting date
                        date = str(time.asctime())

                        # Formatted so that date is Month , Day , Time (hr:mi:se)
                        date = date.split()
                        date = date[1:4]

                        # Getting tension
                        tension = self.current_tension

                        # Tension setpoint
                        tension_setpoint = 12

                        # Creating new data on tension and time
                        patient1_data = {
                        "date": date,
                        "tension": str(tension),
                        "tension_setpoint": str(tension_setpoint)
                        }

                        patient2_data = {
                        "time": date,
                        "tension": str((tension + 1) * 2),
                        "tension_setpoint": str(tension_setpoint)
                        }
                        

                        # Range of short graph
                        # 1 hour range
                        max_size = 720
                        try:
                                if len(updated_file_content["data"][0][self.patient1_name][1]["patient data"]) > max_size:
                                        updated_file_content["data"][0][self.patient1_name][1]["patient data"].pop(0)
                                        updated_file_content["data"][1][self.patient2_name][1]["patient data"].pop(0)
                                        print("Removing old data")
                                else:
                                        pass
                        except:
                                print("Making new patient")

                        # Try to add data to current patient, if patient not found, it creates a new patient in the dict and adds the data there.
                        try:

                                # Appending new data to current patient
                                print("Appending new data to current patient")
                                updated_file_content["data"][0][self.patient1_name][1]["patient data"].append(patient1_data)
                                updated_file_content["data"][1][self.patient2_name][1]["patient data"].append(patient2_data)

                                # Appending new data to backup content and setting how often it updates
                                minutes = 10

                                if time.time() - self.last_time_JSON > 60:
                                        keep_waiting = False

                                if int(str(time.asctime()).split()[3][3:5]) % minutes == 0 and not keep_waiting:
                                        print("Appending new data to backup")
                                        updated_file_backup_content["data"][0][self.patient1_name][1]["patient data"].append(patient1_data)
                                        updated_file_backup_content["data"][1][self.patient2_name][1]["patient data"].append(patient2_data)
                                        keep_waiting = True
                                        self.last_time_JSON = time.time()


                        except:
                                # Creating dict for patient information
                                patient1_info = {"info": [self.patient1_info]}
                                patient2_info = {"info": [self.patient2_info]}

                                patient1_data = {"patient data": [patient1_data]}
                                patient2_data = {"patient data": [patient2_data]}

                                i = len(updated_file_content["data"])

                                # Appending new patient dict and the new data
                                updated_file_content["data"].append({self.patient1_name: [patient1_info]})
                                updated_file_content["data"][i][self.patient1_name].append(patient1_data)

                                updated_file_content["data"].append({self.patient2_name: [patient2_info]})
                                updated_file_content["data"][i + 1][self.patient2_name].append(patient2_data)


                                updated_file_backup_content["data"].append({self.patient1_name: [patient1_info]})
                                updated_file_backup_content["data"][i][self.patient1_name].append(patient1_data)

                                updated_file_backup_content["data"].append({self.patient2_name: [patient2_info]})
                                updated_file_backup_content["data"][i + 1][self.patient2_name].append(patient2_data)

                                print("Patients created")

                        # Writing the updated file to the local computer
                        with open(self.file_path , 'w') as file1 , open(self.file_backup_path , 'w') as file2:
                                json.dump(updated_file_content , file1 , indent = 4)
                                json.dump(updated_file_backup_content , file2 , indent = 4)
                                print("Data added to local file")

                        # Create the updated file using local data
                        updated_file = {
                        'message': 'Update JSON file',
                        'content': base64.b64encode(json.dumps(updated_file_content).encode()).decode(),
                        'sha': current_sha  # Include the current sha
                        }

                        updated_backup_file = {
                        'message': 'Update backup JSON file',
                        'content': base64.b64encode(json.dumps(updated_file_backup_content).encode()).decode(),
                        'sha': current_backup_sha  # Include the current sha
                        }

                        # Send a PUT request to update the file
                        response = requests.put(self.api_url, headers = self.headers , json = updated_file)
                        response_backup = requests.put(self.api_backup_url , headers = self.headers , json = updated_backup_file)

                        # If statement for put request
                        if response.status_code == 200:
                                print('File successfully updated on GitHub')
                        else:
                                print('Failed to update the file. Status code: ' , response.status_code)
                                print('Response: ' , response.json)

                        # If statement for put request
                        if response_backup.status_code == 200:
                                print('File successfully updated on GitHub')
                        else:
                                print('Failed to update the file. Status code: ' , response_backup.status_code)
                                print('Response: ' , response_backup.json)

                else:
                        print('Failed to retrieve the current file data. Status code:', response.status_code)
                        print('Response:', response.json())

    # Get the tension reading from the hx711 and display it on current weight LCD
    def updateWeight(self):

        # self.current_tension = self.get_tension()

        # Artificial Tension
        self.count += 1
        self.current_tension = self.get_artificial_tension()

        # Only adding tension every 1 seconds to the tension array
        if time.time() - self.last_time_array > 1:
            self.currentTensionArray.append(self.current_tension)
            if not self.scheduleOn:
                self.setTensionArray.append(self.setWeight)
            self.last_time_array = time.time()

        if math.floor(self.current_tension) <= 0.0:
            self.ui.currentWeightLCD.display(0.00)
        else:
            self.ui.currentWeightLCD.display(self.current_tension)
        
    def updateSchedule(self):
        # If the setpoint is changing with the schedule, update the setWeight depending on how long since the start of schedule mode
        if self.scheduleOn:
            # Find the time since the schedule started (seconds)
            timeSinceScheduleStart = int(time.time() - self.scheduleStartTime)

            # Changing the setpoint to the setpoint on the constructed array from setSchedule3 based on the time since started
            self.setWeight = self.setTensionArray[timeSinceScheduleStart]

            # The LCD display will change to display the set weight
            self.ui.setTensionLCD.display(self.setWeight)

            # Finding the time left on the schedule 
            timeScheduleLeft = self.setScheduleTime_Sec - timeSinceScheduleStart
            timeScheduleLeft_min = str(int((timeScheduleLeft // 60) % 60))
            timeScheduleLeft_hr = str(int(timeScheduleLeft // 3600))

            # Displaying the time left on the schedule
            self.ui.ScheduleTimeLCD.display(timeScheduleLeft_hr + ":" + timeScheduleLeft_min)

            # When the time on schedule is less than 1 second it turns off schedule mode
            if timeScheduleLeft < 1:
                self.scheduleOn = False
                self.scheduleMode = "Schedule Mode: Off"
                self.setTensionArray = []
                self.ui.labelScheduleMode.setText(self.scheduleMode)
                self.ui.graphWidget.clear()

        # If schedule mode is off, the LCDs on the Schedule will display 0
        else:
            self.ui.ScheduleTimeLCD.display(0)
            self.ui.ScheduleSetpointLCD.display(0)

    ## Tension History Plotter Function ##
    def plot_chart(self):
        # Max size of currentTensionArray for no schedule
        max_size = 3600 # (~1 hour)
        self.ui.graphWidget.clear()
        # If tension setpoint
        if self.scheduleOn:

            self.ui.graphWidget.plot(range(int(self.setScheduleTime_Sec)) , self.setTensionArray)
            self.ui.graphWidget.plot(range(len(self.currentTensionArray)) , self.currentTensionArray , pen = (255 , 0 , 0))
        else:
            # If the length of the current tension array is greater than 3600 it deletes the first item in the list
            if len(self.currentTensionArray) > max_size:
                self.currentTensionArray.pop(0)
                self.setTensionArray.pop(0)

            self.ui.graphWidget.plot(range(len(self.currentTensionArray)) , self.setTensionArray)
            self.ui.graphWidget.plot(range(len(self.currentTensionArray)) , self.currentTensionArray , pen = (255 , 0 , 0))
            
            
        
    ## Set Tension Keypad Function ##
    def manualSetTension(self, pressed):

        # If enter button is pressed get the setWeight and display on setTensionLCD
        # If number entered is greater than 50 lb it needs to be re-entered
        if pressed == 11:
            if self.ui.manualSetTensionLCD.value() < 50:
                self.setWeight = self.ui.manualSetTensionLCD.value()
                self.ui.setTensionLCD.display(self.setWeight)
                self.ui.setMarkTension.setHidden(False)
                if self.scheduleOn:
                    self.setTensionArray = []
                    self.currentTensionArray = []
                    self.scheduleMode = "Schedule Mode: Off"  
                self.scheduleOn = False
                
            else:
                self.ui.tooLargeLabelTension.setHidden(False)
            self.ui.manualSetTensionLCD.display(0)
            self.maxPrecision_1 = False
            self.decimal_1 = False

        # If the clear button is pressed, the display goes back 0
        elif pressed == 13:
            self.ui.manualSetTensionLCD.display(0)
            self.ui.setMarkTension.setHidden(True)
            self.ui.tooLargeLabelTension.setHidden(True)

        # If the decimal number is pressed it puts a decimal down, but does not let you put more than one decimal down
        elif pressed == 12:
            if self.decimal_1 == False:
                    mstLCDstring = (str(int(self.ui.manualSetTensionLCD.value()))+("."))
                    self.ui.manualSetTensionLCD.display(mstLCDstring)
                    self.decimal_1 = True
                    self.ui.setMarkTension.setHidden(True)
                    self.ui.tooLargeLabelTension.setHidden(True)

        # When any number is pressed it displays it on the LCD
        else:
            if (self.ui.manualSetTensionLCD.value() == 0) and (self.decimal_1 == False):
                self.ui.manualSetTensionLCD.display(pressed)
                self.ui.setMarkTension.setHidden(True)
                self.ui.tooLargeLabelTension.setHidden(True)
            else:
                if self.decimal_1 == False:
                    mstLCDstring = (str(int(self.ui.manualSetTensionLCD.value())))+(str(pressed))
                    self.ui.manualSetTensionLCD.display(float(mstLCDstring))
                    self.ui.setMarkTension.setHidden(True)
                    self.ui.tooLargeLabelTension.setHidden(True)
                else:
                    if self.maxPrecision_1 == False:
                        mstLCDstring = str(float(self.ui.manualSetTensionLCD.value()) + (0.1 * int(pressed)))
                        self.ui.manualSetTensionLCD.display(mstLCDstring)
                        self.maxPrecision_1 = True
                        self.ui.setMarkTension.setHidden(True)
                        self.ui.tooLargeLabelTension.setHidden(True)

    ## Schedule1 Keypad Function ##
    def manualSetSchedule1(self, pressed):
        if pressed == 11: # Enter
            if self.ui.manualSetSchedule1LCD.value() < 50:
                self.setScheduleWeight = self.ui.manualSetSchedule1LCD.value()
                self.ui.setMarkSchedule1.setHidden(False)
                self.ui.keypadEnter_3.setText("Next")
                self.ui.keypadEnter_3.clicked.connect(self.showSetSchedule2)
            else:
                self.ui.tooLargeLabelSchedule1.setHidden(False)
            self.maxPrecision_3 = False
            self.decimal_3 = False
            
        elif pressed == 13: # Clear
            self.ui.manualSetSchedule1LCD.display(0)
            self.ui.setMarkSchedule1.setHidden(True)
            self.ui.tooLargeLabelSchedule1.setHidden(True)
            
        elif pressed == 12: # Decimal
            if self.decimal_3 == False:
                    mstLCDstring = (str(int(self.ui.manualSetSchedule1LCD.value()))+("."))
                    self.ui.manualSetSchedule1LCD.display(mstLCDstring)
                    self.decimal_3 = True
                    self.ui.setMarkSchedule1.setHidden(True)
                    self.ui.tooLargeLabelSchedule1.setHidden(True)
                    
        else: # Any number
            if (self.ui.manualSetSchedule1LCD.value() == 0) and (self.decimal_3 == False):
                self.ui.manualSetSchedule1LCD.display(pressed)
                self.ui.setMarkSchedule1.setHidden(True)
                self.ui.tooLargeLabelSchedule1.setHidden(True)

            else:
                if self.decimal_3 == False:
                    mstLCDstring = (str(int(self.ui.manualSetSchedule1LCD.value())))+(str(pressed))
                    self.ui.manualSetSchedule1LCD.display(float(mstLCDstring))
                    self.ui.setMarkSchedule1.setHidden(True)
                    self.ui.tooLargeLabelSchedule1.setHidden(True)
                else:
                    if self.maxPrecision_3 == False:
                        mstLCDstring = str(float(self.ui.manualSetSchedule1LCD.value()) + (0.1 * int(pressed)))
                        self.ui.manualSetSchedule1LCD.display(mstLCDstring)
                        self.maxPrecision_3 = True
                        self.ui.setMarkSchedule1.setHidden(True)
                        self.ui.tooLargeLabelSchedule1.setHidden(True)

    ## Schedule2 Keypad Function ##
    def manualSetSchedule2(self, pressed):

        # Makes the button say enter again and clears the LCD for schedule1
        self.ui.keypadEnter_3.setText("Enter")
        self.ui.manualSetSchedule1LCD.display(0)

        if pressed == 11: # Enter
            if self.ui.manualSetSchedule2LCD.value() < 24:
                self.setScheduleTime = self.ui.manualSetSchedule2LCD.value()
                self.ui.setMarkSchedule2.setHidden(False)
                self.ui.keypadEnter_7.setText("Next")
                self.ui.keypadEnter_7.clicked.connect(self.showSetSchedule3)
            else:
                self.ui.tooLargeLabelSchedule2.setHidden(False)
            self.maxPrecision_4 = False
            self.decimal_4 = False
            
        elif pressed == 13: # Clear
            self.ui.manualSetSchedule2LCD.display(0)
            self.ui.setMarkSchedule2.setHidden(True)
            self.ui.tooLargeLabelSchedule2.setHidden(True)
            
        elif pressed == 12: # Decimal
            if self.decimal_4 == False:
                    mstLCDstring = (str(int(self.ui.manualSetSchedule2LCD.value()))+("."))
                    self.ui.manualSetSchedule2LCD.display(mstLCDstring)
                    self.decimal_4 = True
                    self.ui.setMarkSchedule2.setHidden(True)
                    self.ui.tooLargeLabelSchedule2.setHidden(True)
                    
        else: # Any number
            if (self.ui.manualSetSchedule2LCD.value() == 0) and (self.decimal_4 == False):
                self.ui.manualSetSchedule2LCD.display(pressed)
                self.ui.setMarkSchedule2.setHidden(True)
                self.ui.tooLargeLabelSchedule2.setHidden(True)

            else:
                if self.decimal_4 == False:
                    mstLCDstring = (str(int(self.ui.manualSetSchedule2LCD.value())))+(str(pressed))
                    self.ui.manualSetSchedule2LCD.display(float(mstLCDstring))
                    self.ui.setMarkSchedule2.setHidden(True)
                    self.ui.tooLargeLabelSchedule2.setHidden(True)
                else:
                    if self.maxPrecision_4 == False:
                        mstLCDstring = str(float(self.ui.manualSetSchedule2LCD.value()) + (0.1 * int(pressed)))
                        self.ui.manualSetSchedule2LCD.display(mstLCDstring)
                        self.maxPrecision_4 = True
                        self.ui.setMarkSchedule2.setHidden(True)
                        self.ui.tooLargeLabelSchedule2.setHidden(True)

    ## Set Schedule Mode ##
    def manualSetSchedule3(self , pressed):

        # Returns the keypadEnter back to Enter and makes the LCD 0 again
        self.ui.keypadEnter_7.setText("Enter")
        self.ui.manualSetSchedule2LCD.display(0)

        # Converting the setScheduleTime from hours to seconds
        self.setScheduleTime_Sec = self.setScheduleTime * 3600

        # Initializing values for getting the tension
        startWeight = self.current_tension
        endWeight = self.setScheduleWeight
        self.setTensionArray = []
        self.currentTensionArray = []
        changeInWeight = endWeight - startWeight
        timeArray = range(int(self.setScheduleTime_Sec))

        # Modifiers to the step
        step_wait = 60 * 20 # Number of seconds to wait at each step (20 min)
        steps = 3 # Number of steps

        # Linear
        if pressed == 1:
            rate = changeInWeight/self.setScheduleTime_Sec
            for i in timeArray:
                self.setTensionArray.append(startWeight + rate * i)
            self.scheduleMode = "Schedule Mode: Linear"

        
        # Steps
        if pressed == 2:
            
            # Create a rate that still reaches the setpoint in the desired time with the desired steps
            rate = changeInWeight/(self.setScheduleTime_Sec - step_wait * (steps - 1))

            # Create an array with just the increasing tension
            for i in range(int(self.setScheduleTime_Sec - step_wait * (steps - 1))):
                self.setTensionArray.append(startWeight + rate * i)
                
            # Include in the array the stops where it holds tension for a given time
            for i in range(steps - 1):
                stop_spot = int(len(self.setTensionArray)/steps * (i + 1))
                stop_tension = self.setTensionArray[stop_spot]
                for j in range(step_wait):
                    self.setTensionArray.insert(stop_spot , stop_tension)
            self.scheduleMode = "Schedule Mode: Steps"

        
        # Boolean for if the setpoint is changing (ie. schedule mode) or if it is static
        self.scheduleOn = True

        self.scheduleStartTime = time.time()

        self.ui.labelScheduleMode.setText(self.scheduleMode)

        self.ui.ScheduleSetpointLCD.display(self.setScheduleWeight)

        # Clearing the graph if it has anything on it
        self.ui.graphWidget.clear()
            
        # Changes the screen to the chart screen
        self.showTensionHistory()

    ## Set Time Delay Keypad Function##
    def manualSetTimeDelay(self, pressed):
        if pressed == 11: # Enter
            if self.ui.manualSetDelayLCD.value() < 600:
                self.setTimeDelay = self.ui.manualSetDelayLCD.value()
                self.ui.timeDelayLCD.display(self.setTimeDelay)
                self.ui.setMarkDelay.setHidden(False)
            else:
                self.ui.tooLargeLabelDelay.setHidden(False)
            self.ui.manualSetDelayLCD.display(0)
            self.maxPrecision_2 = False
            self.decimal_2 = False
            
        elif pressed == 13: # Clear
            self.ui.manualSetDelayLCD.display(0)
            self.ui.setMarkDelay.setHidden(True)
            self.ui.tooLargeLabelDelay.setHidden(True)
            
        elif pressed == 12: # Decimal
            if self.decimal_2 == False:
                    mstLCDstring = (str(int(self.ui.manualSetDelayLCD.value()))+("."))
                    #print (mstLCDstring)
                    self.ui.manualSetDelayLCD.display(mstLCDstring)
                    self.decimal_2 = True
                    self.ui.setMarkDelay.setHidden(True)
                    self.ui.tooLargeLabelDelay.setHidden(True)
                    
        else: # Any number
            #print("number pressed")
            if (self.ui.manualSetDelayLCD.value() == 0) and (self.decimal_2 == False):
                #print("value is 0 and decimal is false")
                self.ui.manualSetDelayLCD.display(pressed)
                #print("manual set time displayed")
                self.ui.setMarkDelay.setHidden(True)
                self.ui.tooLargeLabelDelay.setHidden(True)
                #print("setmarks hidden")
            else:
                if self.decimal_2 == False:
                    mstLCDstring = (str(int(self.ui.manualSetDelayLCD.value())))+(str(pressed))
                    #print (mstLCDstring)
                    self.ui.manualSetDelayLCD.display(float(mstLCDstring))
                    self.ui.setMarkDelay.setHidden(True)
                    self.ui.tooLargeLabelDelay.setHidden(True)
                else:
                    if self.maxPrecision_2 == False:
                        mstLCDstring = str(float(self.ui.manualSetDelayLCD.value()) + (0.1 * int(pressed)))
                        #print (mstLCDstring)
                        self.ui.manualSetDelayLCD.display(mstLCDstring)
                        self.maxPrecision_2 = True
                        self.ui.setMarkDelay.setHidden(True)
                        self.ui.tooLargeLabelDelay.setHidden(True)
        

    def doTensionUp(self):
        #print("Weight +1.0")
        self.setWeight += 1.0
        #print(self.setWeight)
        self.ui.setTensionLCD.display(self.setWeight)
        

    def doTensionDown(self):
        #print("Weight -1.0")
        self.setWeight -= 1.0
        #print(self.setWeight)
        self.ui.setTensionLCD.display(self.setWeight)


		
    def show(self):
        self.main_win.show()

    def showSetTension(self):
        self.ui.stackedWidget.setCurrentWidget(self.ui.setTension)

    def showSetTimeDelay(self):
        self.ui.stackedWidget.setCurrentWidget(self.ui.setTimeDelay)

    def showSetSchedule1(self):
        self.ui.stackedWidget.setCurrentWidget(self.ui.setSchedule1)

    def showSetSchedule2(self):
        self.ui.stackedWidget.setCurrentWidget(self.ui.setSchedule2)

    def showSetSchedule3(self):
        self.ui.stackedWidget.setCurrentWidget(self.ui.setSchedule3)

    def showTensionHistory(self):
        self.ui.stackedWidget.setCurrentWidget(self.ui.tensionHistory)




    def get_tension(self):
        val = self.hx.get_weight(5)

        #self.hx.power_down()
        #self.hx.power_up()
        #time.sleep(0.1)
        return val
    
    def get_artificial_tension(self):
        if self.count % 20 == 0:
            self.val = 15 * abs(math.sin(math.radians(self.count / 15)))

        return self.val

    # Controller is able to compare the current tension to the set point to see if it's within the dead band and within the slow mode range
    def controller(self):
        # If the time is greater than or equal to the set pause period, it will continue the controls
        if time.time() - self.last_time_delay > self.setTimeDelay:
            # If the current tension is below the dead band the tension is increased
            if self.setWeight - self.dead_band_range > self.current_tension:

                # If the current tension is below the slow mode range the speed is fast
                if self.setWeight - self.slow_mode_range > self.current_tension:
                    GPIO.output(self.slow_mode , GPIO.HIGH)
                    speed = "Fast"
                else:
                    GPIO.output(self.slow_mode , GPIO.LOW)
                    speed = "Slow"
                GPIO.output(self.increase_tension , GPIO.HIGH)
                GPIO.output(self.decrease_tension , GPIO.LOW)
                turning_direction = "Increasing Tension"
            
            # If the current tension is above the dead band the tension is decreased
            elif self.setWeight + self.dead_band_range < self.current_tension:

                # If the current tension is above the slow mode range the speed is fast
                if self.setWeight + self.slow_mode_range < self.current_tension:
                    GPIO.output(self.slow_mode , GPIO.HIGH)
                    speed = "Fast"
                else:
                    GPIO.output(self.slow_mode , GPIO.LOW)
                    speed = "Slow"
                GPIO.output(self.decrease_tension , GPIO.HIGH)
                GPIO.output(self.increase_tension , GPIO.LOW)
                turning_direction = "Decreasing Tension"
            
            else:
                speed = ""
                turning_direction = "Stopped"
                for i in self.output_pins:
                    GPIO.output(i , GPIO.LOW)
        
        # If it is less than the delay, no adjustments are to be made
        else:
             turning_direction = "Stopped"
             speed = ""
             for i in self.output_pins:
                GPIO.output(i , GPIO.LOW)
        print(speed)
        print(turning_direction)
        return turning_direction , speed


if __name__ == '__main__':
    app = QApplication(sys.argv)

    # Set the application style to Fusion
    app.setStyle('Fusion')

    # Set a dark palette for the application
    dark_palette = QPalette()
    dark_palette.setColor(QPalette.Window, QColor(53, 53, 53))
    dark_palette.setColor(QPalette.WindowText, Qt.white)
    dark_palette.setColor(QPalette.Base, QColor(25, 25, 25))
    dark_palette.setColor(QPalette.AlternateBase, QColor(53, 53, 53))
    dark_palette.setColor(QPalette.ToolTipBase, Qt.white)
    dark_palette.setColor(QPalette.ToolTipText, Qt.white)
    dark_palette.setColor(QPalette.Text, Qt.white)
    dark_palette.setColor(QPalette.Button, QColor(53, 53, 53))
    dark_palette.setColor(QPalette.ButtonText, Qt.white)
    dark_palette.setColor(QPalette.BrightText, Qt.red)
    dark_palette.setColor(QPalette.Link, QColor(42, 130, 218))
    dark_palette.setColor(QPalette.Highlight, QColor(42, 130, 218))
    dark_palette.setColor(QPalette.HighlightedText, Qt.black)
    app.setPalette(dark_palette)
    
    main_win = scoliosisUi()
    main_win.show()
    
    try:
        sys.exit(app.exec_())
    except:
        #print("Exiting")
        pass
